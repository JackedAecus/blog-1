<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>On Software Engineering, Mathematics and Philosophy</title>
    <description>This is a blog about software, some mathematics, and the occasional philosophy. Not necessarily in that order.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 25 Jul 2019 10:58:56 +0530</pubDate>
    <lastBuildDate>Thu, 25 Jul 2019 10:58:56 +0530</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Capture that (Memory) Flag</title>
        <description>&lt;p&gt;So, yesterday, my friend and PhD student &lt;a href=&quot;https://jpdias.me&quot;&gt;JP Dias&lt;/a&gt;, decided to send me &lt;a href=&quot;/assets/analise.eml&quot;&gt;this .eml file&lt;/a&gt; &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; (I’ll just put a snippet here; you can download the file using the provided link):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Delivered-To: steg@gmail.com
Received: by 2002:a67:f6da:0:0:0:0:0 with SMTP id v26csp64869vso;
        Fri, 7 Jun 2019 03:57:36 -0700 (PDT)
Date: Fri, 07 Jun 2019 11:57:33 +0100
Message-ID: &amp;lt;20190607115733.Horde.gFe3m_OOi1F27Us_apXwyFf@mail.sapo.pt&amp;gt;
From: oposec@sapo.pt
Subject: =?utf-8?b?QW7DoWxpc2U=?=
User-Agent: IMP PTMail 6.1.13
X-Originating-IP: ::ffff:88.157.29.241
X-PTMail-Version: PTMail 6.1.13
X-PTMail-User: eyJpdiI6InRJL05ZUkZUV29CMHFIQnRMbUdqTXc9PSIsImQiOiJJRU95SWsvTWRIOFpoQkpjL0VEKzJqTFpUbXgyY0g1dWxHUWtmdWFFL09RPSJ9
Content-Type: multipart/mixed; boundary=&quot;=_QyDsuBrIdGsWWD2X__fqMsn&quot;
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit

This message is in MIME format.

--=_QyDsuBrIdGsWWD2X__fqMsn
Content-Type: multipart/alternative; boundary=&quot;=_8G7a0VyQSrsClgArZ-9Qwj3&quot;
Content-Transfer-Encoding: 8bit

This message is in MIME format.

--=_8G7a0VyQSrsClgArZ-9Qwj3
Content-Type: text/plain; charset=utf-8; format=flowed; DelSp=Yes
Content-Description: Mensagem de Texto
Content-Disposition: inline
Content-Transfer-Encoding: 8bit

Olá,

Preciso de alguém capaz de analisar um PC, será que podes ajudar?

PS: Vamos usar a forma habitual de troca de informações classificadas!

--
A VOLATILIDADE é a constante da vida!

--=_QyDsuBrIdGsWWD2X__fqMsn
Content-Type: image/jpeg; name=banner.jpg
Content-Disposition: attachment; size=94178; filename=banner.jpg
Content-Transfer-Encoding: base64

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsK
CwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQU
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCAEcA7YDAREA

[...]

--=_QyDsuBrIdGsWWD2X__fqMsn--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;You are going to enjoy it&lt;/em&gt;, he said, just minutes after I tweeted this naive obfuscation of a javascript program:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;][([][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;]+[])[3]+(!0+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;10&quot;]+([][[]]+[])[1]+&quot;str&quot;+([][[]]+[])[0]+([][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;]+[])[3]+&quot;t&quot;+(!0+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;10&quot;]+&quot;r&quot;](([][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;]+[])[3]+(!0+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;10&quot;]+([][[]]+[])[1]+&quot;s&quot;+(!0+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;10&quot;]+&quot;le.l&quot;+(!0+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;10&quot;]+(&quot;0false&quot;+&quot;&quot;[([][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+
&quot;lter&quot;]+[])[3]+(!0+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;10&quot;]+([][[]]+[])[1]+&quot;str&quot;+([][[]]+[])[0]+([][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;]+[])[3]+&quot;t&quot;+(!0+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;10&quot;]+&quot;r&quot;])[&quot;20&quot;]+(!1+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;20&quot;]+[2]+&quot;+2&quot;+(!0+[][&quot;f&quot;+([!1]+[][[]])[&quot;10&quot;]+&quot;lter&quot;])[&quot;20&quot;])();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am not a security researcher; in fact, despite knowing my way around Verilog and FPGAs, have written emulators for a couple of vintage/toy CPUs, and designed a couple of weekend programming languages, I consider myself an &lt;em&gt;high-level&lt;/em&gt; guy. But, you know, challenge accepted!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Type &lt;a href=&quot;https://en.wikipedia.org/wiki/Email#Filename_extensions&quot;&gt;.EML extension&lt;/a&gt; is well-known and easy to decode, even if you do it by hand. Here is clearly an image encoded in Base64, so let’s start there:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; munpack analise.eml
tempdesc.txt: File exists
banner.jpg (image/jpeg)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which gives us:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/banner.jpg&quot; alt=&quot;banner&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have a plain, ordinary image, then you are most probably using plain, ordinary &lt;a href=&quot;https://en.wikipedia.org/wiki/Steganography&quot;&gt;steganography&lt;/a&gt;. There’s plenty of steg tools out there, but I was in &lt;em&gt;laf&lt;/em&gt;-mode, so I just googled for &lt;a href=&quot;https://futureboy.us/stegano/decinput.html&quot;&gt;something-as-a-service™&lt;/a&gt; and trusted the almighty &lt;code class=&quot;highlighter-rouge&quot;&gt;guess the payload&lt;/code&gt; option:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The payload may be:
  ASCII text

To display, I might suggest using a MIME type of:
  text/plain

&quot;steganoin29952.jpg&quot;:
  format: jpeg
  capacity: 4.9 KB
  embedded file &quot;info.txt&quot;:
    size: 116.0 Byte
    encrypted: rijndael-128, cbc
    compressed: yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Encrypted, compressed; I don’t care. &lt;em&gt;Computer&lt;/em&gt;, do the work for me… please:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0c60fd56872251909cb07a749b03a34a56e1edac  memdmp.zip
https://www.dropbox.com/s/ks30qs78k18lfd0/memdmp.zip?dl=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, so now we have a file; let’s &lt;a href=&quot;https://www.dropbox.com/s/ks30qs78k18lfd0/memdmp.zip?dl=0&quot;&gt;download it&lt;/a&gt;, unzip it, and take a quick look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; du -h memdmp
521M	memdmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So this is probably a memory dump file of a 512M RAM machine. Is there an easy flag here?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; strings memdmp | grep FLAG
Failed to set SPDRP_CONFIGFLAGS of %s error (0x%lx )
Failed to get SPDRP_CONFIGFLAGS of %s error (0x%lx )
PROCESS_FLAG_REBOOTNOTREQUIRED
PROCESS_FLAG_HIDEUI
      SP_FLAG_CABINETCONTINUATION
      HP_FLAG_KERNEL_MODE
PROCESS_FLAG_REBOOTNOTREQUIRED
PROCESS_FLAG_HIDEUI
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nope, too much information; we are going to to this the hardway. Up until this point, I thought that the sentence &lt;em&gt;“A VOLATILIDADE é a constante da vida!”&lt;/em&gt; was something hinting to a password:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; strings memdmp | grep volatilidade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But no, nothing relevant. Soon after, JP pointed out there is a forensics tool called &lt;a href=&quot;https://www.volatilityfoundation.org&quot;&gt;volatility&lt;/a&gt;; perfect:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; vol.py -f memdmp imageinfo
Volatility Foundation Volatility Framework 2.6
INFO    : volatility.debug    : Determining profile based on KDBG search...
          Suggested Profile(s) : WinXPSP2x86, WinXPSP3x86 (Instantiated with WinXPSP2x86)
                     AS Layer1 : IA32PagedMemory (Kernel AS)
                     AS Layer2 : FileAddressSpace (/Users/bytter/Downloads/memdmp)
                      PAE type : No PAE
                           DTB : 0x39000L
                          KDBG : 0x8054cde0L
          Number of Processors : 1
     Image Type (Service Pack) : 3
                KPCR for CPU 0 : 0xffdff000L
             KUSER_SHARED_DATA : 0xffdf0000L
           Image date and time : 2019-06-09 16:04:21 UTC+0000
     Image local date and time : 2019-06-09 16:04:21 +0000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What an amazing little tool. Let’s see what else can we extract from this memdmp:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; vol.py -f memdmp --profile WinXPSP2x86 pstree
Volatility Foundation Volatility Framework 2.6
Name                                                  Pid   PPid   Thds   Hnds Time
-------------------------------------------------- ------ ------ ------ ------ ----
 0x823c89c8:System                                      4      0     54    243 1970-01-01 00:00:00 UTC+0000
. 0x821ad020:smss.exe                                 480      4      3     19 2019-06-09 17:02:15 UTC+0000
.. 0x8222e2a8:winlogon.exe                            604    480     23    519 2019-06-09 17:02:15 UTC+0000
... 0x821d55a8:services.exe                           648    604     15    243 2019-06-09 17:02:15 UTC+0000
.... 0x8225ada0:svchost.exe                          1040    648     78   1525 2019-06-09 16:02:17 UTC+0000
..... 0x821f9130:wuauclt.exe                          256   1040      9    242 2019-06-09 16:02:27 UTC+0000
..... 0x81fd1020:wscntfy.exe                         1444   1040      1     37 2019-06-09 16:02:32 UTC+0000
..... 0x821fba20:wuauclt.exe                         1428   1040      6    118 2019-06-09 16:04:10 UTC+0000
.... 0x82224740:VBoxService.exe                       816    648      8    105 2019-06-09 17:02:15 UTC+0000
.... 0x82176da0:svchost.exe                           948    648      9    243 2019-06-09 16:02:17 UTC+0000
.... 0x81fbf518:alg.exe                               824    648      7    104 2019-06-09 16:02:30 UTC+0000
.... 0x8202aab0:spoolsv.exe                          1596    648     14    110 2019-06-09 16:02:18 UTC+0000
.... 0x8204ec70:svchost.exe                          1088    648      6     83 2019-06-09 16:02:17 UTC+0000
.... 0x821863a0:svchost.exe                           872    648     21    202 2019-06-09 16:02:17 UTC+0000
..... 0x82033658:wmiprvse.exe                         356    872      8    185 2019-06-09 16:03:15 UTC+0000
.... 0x822498b8:svchost.exe                          1148    648     15    197 2019-06-09 16:02:17 UTC+0000
... 0x82217328:lsass.exe                              660    604     25    362 2019-06-09 17:02:15 UTC+0000
.. 0x8225eda0:csrss.exe                               580    480     10    399 2019-06-09 17:02:15 UTC+0000
 0x82188b88:explorer.exe                             1488   1432     14    344 2019-06-09 16:02:18 UTC+0000
. 0x82247d20:cmd.exe                                 1120   1488      1     34 2019-06-09 16:03:45 UTC+0000
.. 0x820573b8:mdd_1.3.exe                            1396   1120      1     24 2019-06-09 16:04:21 UTC+0000
. 0x821a72a8:notepad.exe                             1864   1488      1     39 2019-06-09 16:02:45 UTC+0000
. 0x81fe0910:VBoxTray.exe                             988   1488     11    114 2019-06-09 16:02:30 UTC+0000
. 0x820348f8:ctfmon.exe                              1012   1488      1     69 2019-06-09 16:02:30 UTC+0000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmmm… There’s a couple of interesting processes there. Notepad, VirtualBox, something on the command line. Before we dive into the processes, let inspect easy things like the clipboard:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; vol.py -f memdmp --profile WinXPSP2x86 clipboard

Volatility Foundation Volatility Framework 2.6
Session    WindowStation Format                 Handle Object     Data
---------- ------------- ------------------ ---------- ---------- -----------
         0 WinSta0       CF_UNICODETEXT        0x30115 0xe146f0b8 NOTEPAD
         0 WinSta0       CF_LOCALE            0x5400fb 0xe1b75620
         0 WinSta0       CF_TEXT                   0x1 ----------
         0 WinSta0       CF_OEMTEXT                0x1 ----------

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uh! So something from &lt;code class=&quot;highlighter-rouge&quot;&gt;notepad&lt;/code&gt; resides on the clipboard. What could it be? A password pasted on some input box of a webpage?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; vol.py -f memdmp --profile WinXPSP2x86 editbox
Volatility Foundation Volatility Framework 2.6
******************************
Wnd Context       : 0\WinSta0\Default
Process ID        : 1864
ImageFileName     : notepad.exe
IsWow64           : No
atom_class        : 6.0.2600.5512!Edit
value-of WndExtra : 0xaa708
nChars            : 41
selStart          : 41
selEnd            : 41
isPwdControl      : False
undoPos           : 34
undoLen           : 7
address-of undoBuf: 0xaf7d0
undoBuf           : NOTEPAD
-------------------------


https://bit.ly/31uALei



NOTEPAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait a minute. Could that URL contain something? Well, but of course:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;synt{Z8Z%QHZC%E5PXF!}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This… smells… like… something. At this point, JP asked what would be the typical flag format, to which somebody said: &lt;code class=&quot;highlighter-rouge&quot;&gt;flag{...}&lt;/code&gt;. Wait, this must be it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; echo &quot;synt{Z8Z%QHZC%E5PXF!}&quot; | tr 'A-Za-z' 'N-ZA-Mn-za-m'
flag{M8M%DUMP%R5CKS!}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are wondering, &lt;code class=&quot;highlighter-rouge&quot;&gt;tr 'A-Za-z' 'N-ZA-Mn-za-m'&lt;/code&gt; applies a &lt;a href=&quot;https://en.wikipedia.org/wiki/ROT13&quot;&gt;ROT13&lt;/a&gt; on the string, a simple letter substitution cipher that replaces a letter with the 13th letter after it. And that was it. We started working on this at 21:22 and finished at 22:47; all while having dinner. Not bad for two amateur hackers :)&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;For those that complain he should be working on his thesis, I should stress that he has published nothing less than 15 peer-reviewed papers in international avenues during his first two-years o.O &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 09 Jun 2019 18:29:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2019/06/09/capture-that-memory-flag/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/06/09/capture-that-memory-flag/</guid>
        
        
        <category>Software</category>
        
      </item>
    
      <item>
        <title>A Tale of Tests and Fools in the Land of Asynchronicity</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The first principle is that you must not fool yourself – and you are the easiest person to fool.&lt;/em&gt; — Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This story begins early in 2018 as I was trying to wrap my head around Javascript’s (in particular, NodeJS) &lt;a href=&quot;https://nodejs.org/es/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;Event Loop&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-single-threaded-universe&quot;&gt;A single threaded universe&lt;/h2&gt;

&lt;p&gt;Most modern (as well as old) languages provide an apparatus for the developer to manage the multi-core, multi-processing machinery at our current disposal. Typically, one can easily &lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt; the process and/or use &lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_(computing)&quot;&gt;Threads&lt;/a&gt;. Of course, once you get into &lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrency_(computer_science)&quot;&gt;concurrency&lt;/a&gt; wonderland, you start requiring &lt;a href=&quot;https://en.wikipedia.org/wiki/Inter-process_communication&quot;&gt;Inter-process Communication&lt;/a&gt; (IPC) primitives such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Lock_(computer_science)&quot;&gt;Locks&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Semaphore_(programming)&quot;&gt;Semaphores&lt;/a&gt;; which, incidentally, are part of most standard libraries and OS’s APIs such as POSIX. Some languages go as far as already providing &lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_pool&quot;&gt;Thread Pools&lt;/a&gt;. And &lt;a href=&quot;https://www.ponylang.io&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;https://akka.io&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Erlang_(programming_language)&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://elixirschool.com/en/lessons/advanced/concurrency/&quot;&gt;them&lt;/a&gt; push the boundaries of abstraction as they unveil the wonders of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_model&quot;&gt;Actor Model&lt;/a&gt; of concurrency.&lt;/p&gt;

&lt;p&gt;But Javascript is none of them…&lt;/p&gt;

&lt;p&gt;For historical reasons, Javascript inhabits this comfortable world of single-threaded applications (one that &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=1193856&quot;&gt;might please&lt;/a&gt; Donald Knuth&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;). One instruction is followed by another, and another, and another… all in sequence, all completely deterministic; all according to 99% of developers’ mental models of how a computer should work. It’s a simple and effective abstraction if it wasn’t for a small detail:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Latency (ns)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;L1 cache reference&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Branch mispredict&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;L2 cache reference&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mutex lock/unlock&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;25.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Main memory reference&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;100.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Compress 1K bytes with Zippy&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,000.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Send 1K bytes over 1 Gbps network&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,000.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Read 4K randomly from SSD&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;150,000.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Read 1 MB sequentially from memory&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;250,000.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Round trip within same datacenter&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;500,000.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Read 1 MB sequentially from SSD&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,000,000.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Disk seek&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,000,000.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Read 1 MB sequentially from disk&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20,000,000.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Send packet CA &amp;gt; Netherlands &amp;gt; CA&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;150,000,000.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You see, doing things require &lt;em&gt;time&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. We might be doing CPU-heavy stuff or I/O-heavy stuff. But Javascript &lt;em&gt;things&lt;/em&gt; tend to be bound not by CPU but by I/O. It is only natural: it’s &lt;em&gt;the&lt;/em&gt; language of the web, so most of the time it is manipulating resources through this big network we call the Internet.&lt;/p&gt;

&lt;p&gt;A single-thread application can only be doing one thing at a time: either it is waiting (blocked) for a resource to become available (like downloading 3Mb from a server in CA), or it is computing some fancy animation on the screen. But &lt;em&gt;not&lt;/em&gt; both. Do you see the pickle?&lt;/p&gt;

&lt;p&gt;Fast-forward a few potential discussions in committees and mailing-lists, and a simple solution emerged: if most of the things Javascript is doing is bound by I/O, then abstract I/O away from the user (and possibly make it take advantage of multithreading) while keeping the user’s application single-threaded. In other words, make I/O non-blocking.&lt;/p&gt;

&lt;p&gt;If you are &lt;em&gt;really&lt;/em&gt; paying attention, this &lt;em&gt;per se&lt;/em&gt; solves absolutely nothing. One can abstract away I/O, in the sense that one can say &lt;em&gt;“fetch this for me while I go on with my life”&lt;/em&gt; but the application still needs a way to know that a resource has become available&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;: &lt;em&gt;“here it is what you requested, my lord”&lt;/em&gt;. If the application’s single-thread is busy, 100% focused, on doing other stuff, how can it be disturbed by the I/O subsystem?&lt;/p&gt;

&lt;p&gt;Well, it can’t…&lt;/p&gt;

&lt;p&gt;To solve this second pickle, one must recognise that most Javascript scripts (pun intended), are not always doing stuff. They &lt;em&gt;might&lt;/em&gt; be doing stuff when the user clicks something; or scrolls the page; or 60 times per second if there’s an animation occurring at 60fps. Otherwise, the script is (usually) supposed to be idle. And it is during this idleness that the I/O subsystem can take advantage to interrupt the flow. &lt;em&gt;Lo and behold&lt;/em&gt; the &lt;a href=&quot;https://nodejs.org/es/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;Event Loop&lt;/a&gt; is born.&lt;/p&gt;

&lt;h2 id=&quot;the-event-loop&quot;&gt;The Event Loop&lt;/h2&gt;

&lt;p&gt;An event loop is just… an (endless?) loop. It does &lt;em&gt;stuff&lt;/em&gt; in a certain order, and when it gets to the end, it starts all over. According to the &lt;a href=&quot;https://nodejs.org/es/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained&quot;&gt;Node.js documentation&lt;/a&gt;, this is what the event loop looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   ┌───────────────────────────┐
┌─&amp;gt;│           timers          │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │     pending callbacks     │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │       idle, prepare       │
│  └─────────────┬─────────────┘      ┌───────────────┐
│  ┌─────────────┴─────────────┐      │   incoming:   │
│  │           poll            │&amp;lt;─────┤  connections, │
│  └─────────────┬─────────────┘      │   data, etc.  │
│  ┌─────────────┴─────────────┐      └───────────────┘
│  │           check           │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
└──┤      close callbacks      │
   └───────────────────────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each of these phases has a &lt;a href=&quot;https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)&quot;&gt;FIFO queue&lt;/a&gt; of &lt;a href=&quot;https://en.wikipedia.org/wiki/Callback_(computer_programming)&quot;&gt;callbacks&lt;/a&gt; to execute. Notwithstanding each phase’s specificities, its callbacks are executed in order until (a) its queue has been exhausted, or (b) a maximum number of callbacks has been reached; after which the event loop will move to the next phase, &lt;em&gt;ad nauseam&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;call-me-maybe&quot;&gt;Call me Maybe&lt;/h2&gt;

&lt;p&gt;“&lt;em&gt;You, sir, are talking about these &lt;strong&gt;callbacks&lt;/strong&gt;. What the bloody hell is a &lt;strong&gt;callback&lt;/strong&gt; anyway?&lt;/em&gt;” That’s an excellent question my friend; I am absolutely delighted you have inquired about such wonderful invention! A &lt;a href=&quot;https://en.wikipedia.org/wiki/Callback_(computer_programming)&quot;&gt;callback&lt;/a&gt;, as the name implies, is a way to give &lt;em&gt;something&lt;/em&gt;, typically a function&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, to &lt;em&gt;otherthing&lt;/em&gt; and expect it to call… back… once it decides to do so. In other words, it’s like saying: &lt;em&gt;“please execute this after you find appropriate to do so”&lt;/em&gt;&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. If you have ever coded something in Javascript, you’ll certainly recognize this pattern immediately:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Another one bites the dust&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;function() {...}&lt;/code&gt; part is our callback, and what &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval&lt;/code&gt; essentialy does is to add it to the FIFO of timers. Here’s another one:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;We Click ^.^&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a different type of callback (that requires a &lt;a href=&quot;https://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt;), but the same principles apply. The callback is added to a FIFO somewhere, and once the user clicks on the button, it gets called. Here’s some example using I/O:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./data.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;I win!?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As an exercise for the reader, think about what you are expecting to appear on the screen first: the contents of the file, or the sentence &lt;strong&gt;“I win!?”&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;and-your-point-is&quot;&gt;And your point is…&lt;/h2&gt;

&lt;p&gt;Indeed, I digress. So, early 2018, I was &lt;a href=&quot;https://stackoverflow.com/questions/50382553/asynchronous-bounded-queue-in-js-ts-using-async-await&quot;&gt;trying to understand&lt;/a&gt; how non-blocking single-threaded event-loop based javascript worked. My desiderata was simple: (a) to have a pair of producer/consumers exchanging messages, (b) via a bounded buffer, (c) where the consumer would &lt;em&gt;only&lt;/em&gt; block if there was no message available to consume, and (d) the producer would &lt;em&gt;only&lt;/em&gt; block if the buffer was full. This meant implementing something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Block until available&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Block until available&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first rule of the Developer’s Club is: you don’t talk about the Developer’s Club. The second rule is: &lt;strong&gt;whatever the problem you have at hand, someone else already tried to do it… Better than you… Deal with it!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-producer-consumer-problem&quot;&gt;The Producer-Consumer problem&lt;/h2&gt;

&lt;p&gt;This was no exception, as one can easily find the &lt;a href=&quot;https://en.wikipedia.org/wiki/Producer–consumer_problem&quot;&gt;Producer-Consumer problem&lt;/a&gt; in Wikipedia. Probably someone already had a library in &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; readily available. But I was trying to &lt;em&gt;learn&lt;/em&gt;, not just getting on with my life. So, after studying the problem, I learned two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;That it is very easy (no shit, sherlock) to write wrong implementations. Indeed, &lt;em&gt;“an &lt;a href=&quot;https://en.wikipedia.org/wiki/Producer–consumer_problem#Inadequate_implementation&quot;&gt;inadequate solution&lt;/a&gt; could result in a deadlock where both processes are waiting to be awakened”&lt;/em&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That the most trivial way to solve this would be to use a &lt;em&gt;Semaphore&lt;/em&gt;&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let that sink in… A &lt;em&gt;Semaphore&lt;/em&gt;, an IPC primitive, in a single-threaded application.&lt;/p&gt;

&lt;h2 id=&quot;a-side-quest-with-semaphores&quot;&gt;A Side-Quest with Semaphores&lt;/h2&gt;

&lt;p&gt;The easiest way to explain a semaphore is to imagine trying to park your car in a crowded mall. The semaphore allows people to get &lt;em&gt;into&lt;/em&gt; the park &lt;em&gt;while&lt;/em&gt; there’s still spaces left (we call these &lt;strong&gt;permits&lt;/strong&gt;). Once it gets to &lt;strong&gt;zero&lt;/strong&gt;, tough luck: you’ll have to &lt;strong&gt;wait&lt;/strong&gt;. Until someone exits the park and &lt;strong&gt;signals&lt;/strong&gt; a free spot, that is. In other words, a Semaphore adheres to the following contract:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncSemaphore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why is the &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; you ask? Well, because I don’t want to block my code &lt;em&gt;until&lt;/em&gt; the semaphore says there are now free parking spaces. Remember: we are living on a &lt;strong&gt;single threaded&lt;/strong&gt; universe, and all &lt;em&gt;userland code&lt;/em&gt;, including our implementation of a Semaphore, is treated the same way, running in the same thread. There’s no possible way for the semaphore to &lt;em&gt;even check&lt;/em&gt; if there are free spaces, since we are &lt;em&gt;blocked&lt;/em&gt; in the line waiting for such thing to happen. So, yes, a deadlock would occur. The solution is to pass a callback saying: &lt;em&gt;“hey, once there’s a permit I can use, call me”&lt;/em&gt;. If you don’t understand the relationship between Callbacks, &lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;Promises&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Async/await&quot;&gt;Async/Awaits&lt;/a&gt;, it’s study time. Thus, I found my first solution to the AsyncSemaphore challenge:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncSemaphore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;permits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-producer-consumer-part-ii&quot;&gt;The Producer-Consumer: Part II&lt;/h2&gt;

&lt;p&gt;The subsequent solution to the producer–consumer problem simply tracks the state of the queue with two semaphores: &lt;code class=&quot;highlighter-rouge&quot;&gt;emptyCount&lt;/code&gt;, the number of empty places in the queue, and &lt;code class=&quot;highlighter-rouge&quot;&gt;fullCount&lt;/code&gt;, the number of elements in the queue. Two invariants must be preserved: (1) &lt;code class=&quot;highlighter-rouge&quot;&gt;emptyCount&lt;/code&gt; must always to be lower or equal to the actual number of empty places in the queue, and (2) &lt;code class=&quot;highlighter-rouge&quot;&gt;fullCount&lt;/code&gt; must always be lower or equal to the actual number of items in the queue. If one wants to relax on the size of the buffer (thus allowing an infinite-length queue), then a single semaphore would be more than enough. And that’s exactly where I started from:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;waitingEnqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncSemaphore&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitingEnqueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncSemaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitingEnqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitingEnqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Proud of my code, I made some tests, answered my own question on Stackoverflow&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;, and all was good. I finished my post with the following sentence: &lt;em&gt;“I’m still not sure this doesn’t reintroduce subtle bugs, without extensive testing”&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-tale-of-tests&quot;&gt;A Tale of Tests&lt;/h2&gt;

&lt;p&gt;Back to our main story: how do we know that the implementation is correct? As of today, I have 11 upvotes on the question, 6 upvotes on the answer. It surely doesn’t seem like a pressing issue, indeed. But I recently gave the same challenge to my students so we could all share the joys of banging our heads against a wall. It should not come as a surprise that they found my solution on Stackoverflow, and copy-pasted the code &lt;em&gt;as-is&lt;/em&gt;&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Did I tested it? I surely did! At some point, I even provided a “statistical test” that generated random permutations at will of &lt;code class=&quot;highlighter-rouge&quot;&gt;enqueues()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeues()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testAsyncQueueBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enqueues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Do a random permutation of enqueing and dequeing&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;enqueues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enqueues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dequeues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enqueues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Length should be equal minimum between enqueues and dequeues&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isLengthOk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; 

    &lt;span class=&quot;c1&quot;&gt;// Messages should be ordered&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isArraySorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isLengthOk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSorted&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As far as I knew, my code passed these tests… Repeatedly. My students used this for their own implementations until they eventually found my code. They used it, and up until now no-one has complained.&lt;/p&gt;

&lt;h2 id=&quot;on-human-intuition&quot;&gt;On Human Intuition&lt;/h2&gt;

&lt;p&gt;I like to think our brain has a working mode akin to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Generative_adversarial_network&quot;&gt;Generative adversarial network (GAN)&lt;/a&gt;. Part of my mind (the &lt;em&gt;code-monkey&lt;/em&gt;) is generating solutions; sometimes faster than my fingers can type. The IDE, the REPL, the compiler’s type-system, the tests… All those systems are there to guide the &lt;em&gt;code-monkey&lt;/em&gt; in ensuring he is doing his &lt;em&gt;thing right&lt;/em&gt;. This is my “generative” neural network.&lt;/p&gt;

&lt;p&gt;Then there’s a second part which has no control of my fingers. It sits in the background, glances over the code, and provides me a faint signal — more like a feeling, actually — if I am doing the &lt;em&gt;right thing&lt;/em&gt;. This is my “discriminative” network.&lt;/p&gt;

&lt;p&gt;Daniel Kahneman alludes to this dichotomy between two modes of thought in his best-seller &lt;a href=&quot;https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow&quot;&gt;Thinking, Fast and Slow&lt;/a&gt;: “System 1” is fast, instinctive and emotional; “System 2” is slower, more deliberative, and more logical. I am not sure Kahneman systems and my metaphor are a perfect fit, but…&lt;/p&gt;

&lt;p&gt;All this time, my &lt;em&gt;discriminative&lt;/em&gt; system kept telling me: there might be something wrong with your solution, but I don’t know what. How can that be? Tests are passing and students aren’t complaining.&lt;/p&gt;

&lt;h2 id=&quot;a-tale-of-fools&quot;&gt;A Tale of Fools&lt;/h2&gt;

&lt;p&gt;Eventually I gave the exact same problem to my friend and colleague &lt;a href=&quot;https://web.fe.up.pt/~arestivo/page/&quot;&gt;André Restivo&lt;/a&gt;. He grabbed his trusty ThinkPad and started coding away. At some point, he thought to have arrived at a solution that didn’t made usage of Semaphores. I claimed that, somewhere, somehow, he would be emulating the same logic of a Semaphore; just disguised as something else. I provided my testing function, and as expected — expected by me, that is — it failed.&lt;/p&gt;

&lt;p&gt;The thing is that we didn’t just wanted it to fail. We wanted to know &lt;em&gt;how&lt;/em&gt; it failed, and so we started tracing to the console the particular permutation that lead to the failure: one freaking hundred invocations of &lt;code class=&quot;highlighter-rouge&quot;&gt;enqueue()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeue()&lt;/code&gt;. This is stupid, we thought. Well, just try and shrink the number of maximum operations to four (because… reasons), and run the test until it fails. And fail it did, with the following sequence of operations:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dequeue() // #1
Enqueue()
Dequeue() // #2
Dequeue() // #3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The particular problem at hand was that his implementation was not blocking &lt;code class=&quot;highlighter-rouge&quot;&gt;#2&lt;/code&gt; as expected, but instead triggering both the callbacks of &lt;code class=&quot;highlighter-rouge&quot;&gt;#1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#2&lt;/code&gt;. André joked away: &lt;em&gt;“Well, the problem is in your test!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Such hypothesis didn’t make his implementation work any better, in my defense. We meticulously pinned out why it was failing. But it made me think: &lt;em&gt;how certain was I that this particular permutation happened before while testing my own code? What other buggy permutations may be lurking around without my awareness?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have taught &lt;em&gt;“Formal Methods in Software Engineering”&lt;/em&gt; for some years. One of the tools we used was Daniel Jackson’s &lt;a href=&quot;http://alloytools.org&quot;&gt;Alloy Analyzer&lt;/a&gt;, which &lt;em&gt;“provides a declarative specification language for expressing structural constraints and behavior of software systems”&lt;/em&gt;. Implementing a full system in Alloy is a pain in the ass, but there was something that I always enjoyed when using it: it gave me concrete &lt;em&gt;counter-examples&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, Daniel allured to this &lt;em&gt;“small-scope hypothesis”&lt;/em&gt; as underlying the confidence in Alloy’s results. In essence, it claims that &lt;em&gt;“most inconsistent models have counterexamples within small bounds”&lt;/em&gt;. Remember our strategy of &lt;em&gt;shrinking&lt;/em&gt; the counter-example? It seems our intuition also believes the hypothesis to be true.&lt;/p&gt;

&lt;p&gt;But I was &lt;strong&gt;not&lt;/strong&gt; going to implement the consumer-producer problem in Alloy, for two reasons: (1) it’s a well-known problem that was proved to be correctly solved, and (2) I wasn’t interested in testing its &lt;em&gt;abstract solution&lt;/em&gt;, but my &lt;em&gt;concrete implementation&lt;/em&gt;, with Javascript’s Event Loop and all.&lt;/p&gt;

&lt;h2 id=&quot;property-based-testing&quot;&gt;Property-based Testing&lt;/h2&gt;

&lt;p&gt;Remember the second rule of the Developer’s Club? Let me introduce you to &lt;a href=&quot;https://www.npmjs.com/package/fast-check&quot;&gt;fast-check&lt;/a&gt;. This library allows you to check the truthfulness of properties in your code. What is a property, you ask? Well, it’s something like &lt;em&gt;for all (x, y, …) such as precondition(x, y, …) holds, property(x, y, …) is true&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s provide a simple example. Imagine you’ve just written an amazing function that checks if a certain &lt;em&gt;pattern&lt;/em&gt; is present in a given string:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usually you would go are write some tests like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Look ma, no tests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Look ma, no tests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ma'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Look ma, no tests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Look'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When should you stop? What makes you believe that it will work for any (all?) combinations of strings and substrings? What makes you sure you aren’t just testing the results that &lt;em&gt;you know&lt;/em&gt; to work (even if somewhat subconsciously)&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;? It’s a pickle.&lt;/p&gt;

&lt;p&gt;With property-based testing, you would write:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fast-check'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fast-check bases itself on the notion of &lt;em&gt;arbitraries&lt;/em&gt;. An &lt;code class=&quot;highlighter-rouge&quot;&gt;Arbitrary&amp;lt;T&amp;gt;&lt;/code&gt; is a generator of &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;’s. How does it know how to generate &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;’s? Well, someone (which might have been you) coded it in such a way that given a random number, it would produce a deterministic uniform distribution of random &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;’s. Fast-check already provides us with &lt;a href=&quot;https://github.com/dubzzz/fast-check/blob/master/documentation/1-Guides/Arbitraries.md&quot;&gt;built-in arbitraries&lt;/a&gt; to generate natural numbers, booleans, strings and arrays of stuff… amongst others. Then, it is up to its internal engine (which is called using &lt;code class=&quot;highlighter-rouge&quot;&gt;property()&lt;/code&gt;) to check that our property remains valid for any arbitrary input.&lt;/p&gt;

&lt;p&gt;If all it did was generate random stuff, it wouldn’t be any better than my “statistical test”. So it does some additional clever things. First, fast-check also believes in the &lt;em&gt;small-scope hypothesis&lt;/em&gt;: arbitraries may be &lt;em&gt;statistically biased&lt;/em&gt; towards typical problematic situations. In the case of integers, you know the drill: &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-Infinity&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;+Infinity&lt;/code&gt; are the usual suspects. Second, values generated by an &lt;code class=&quot;highlighter-rouge&quot;&gt;Arbitrary&amp;lt;T&amp;gt;&lt;/code&gt; may also provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;shrink(prev: Ts): Stream&amp;lt;Ts&amp;gt;&lt;/code&gt; function, which may be used to &lt;em&gt;shrink&lt;/em&gt; a counter-example once it has been found.&lt;/p&gt;

&lt;h2 id=&quot;a-test-for-asyncsemaphore&quot;&gt;A Test for AsyncSemaphore&lt;/h2&gt;

&lt;p&gt;Let’s implement a test for the AsyncSemaphore. We start by specifying how to generate a test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aNat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBoolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fast-check'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;asyncProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;aNat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;anArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'S'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'W'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testSemaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;numRuns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we are basically saying is that we want to generate arbitrary semaphores with permits up to 10, and arbitrary sequences of &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt;. The sequence can be easily derived from an arbitrary array of booleans (up to size 100), where &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; is mapped to &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;. Then, we test our semaphore for &lt;em&gt;well-behaveness&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testSemaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'W'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncSemaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'S'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;signals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;waits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;signals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In other words, given any sequence of &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; operations, there can only be as many &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;’s solved as there was &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt;’s, plus the initial permits.&lt;/p&gt;

&lt;h2 id=&quot;eureka&quot;&gt;Eureka!&lt;/h2&gt;

&lt;p&gt;As soon as I ran this, I got the following result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;catch Error: Property failed after 4 tests 
{ seed: 1474060413, path: &quot;3:0:1:0:1:2:1:1:0:3&quot;, endOnFailure: true } 
Counterexample: [0,[&quot;W&quot;,&quot;S&quot;,&quot;W&quot;]] 
Shrunk 9 time(s) 
Got error: Property failed by returning false 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, not only my semaphore doesn’t work as expected (!) but the counter-example is embarassingly simple: &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;, on a semaphore initialized with &lt;code class=&quot;highlighter-rouge&quot;&gt;permits = 0&lt;/code&gt;. Why!?&lt;/p&gt;

&lt;h2 id=&quot;sherlock-your-services-are-required&quot;&gt;Sherlock, your services are required&lt;/h2&gt;

&lt;p&gt;The culprit is the Event Loop. Thank you, next…&lt;/p&gt;

&lt;p&gt;Oh, you want more details? Well, let’s start by analysing the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; array for this particular example. Its size is two when it should be only one. That means that these promises:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…found a way to be both executed; which in turn means that this line:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…may have been executed at least one more time than it should have. But that doesn’t make any sense: there’s but one invokation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt; method! It’s time to &lt;em&gt;trace&lt;/em&gt; the execution:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Wait received 
Promised created 
Signal received 
Increase Permits
Promise resolved
Wait received
Decrease the permits 
Decrease the permits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So here’s what’s happening: After &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; is received, we were expecting it to create a promise (since &lt;code class=&quot;highlighter-rouge&quot;&gt;permits == 0&lt;/code&gt;). Then, we were expecting it to &lt;em&gt;decrease&lt;/em&gt; the permits. But that’s not what happens. Instead, right after the promise is created, &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt; is received, it increases the &lt;code class=&quot;highlighter-rouge&quot;&gt;permits&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, then checks for pending promises. It finds the last one and resolves it. One could &lt;em&gt;also&lt;/em&gt; expect at this point that the permit would decrease, since the execution of the code following the promise would continue. But no! Instead, the final &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; is received, it checks if &lt;code class=&quot;highlighter-rouge&quot;&gt;permits == 0&lt;/code&gt; (which is unexpectedly false), it resolves by decreasing the permits and without creating a promise, and then the pending permits decrease twice. &lt;em&gt;Phew!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What is going on here is that our &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; implementation is buggy:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s only one promise created in this example, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; keyword has the result of pushing the rest of the program as a &lt;code class=&quot;highlighter-rouge&quot;&gt;callback&lt;/code&gt; that went to some Event Loop phase’s FIFO. And this includes the critical &lt;code class=&quot;highlighter-rouge&quot;&gt;this.permits -= 1&lt;/code&gt;. The program proceeds sequentially, and the fact that the promise is solved by &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt; doesn’t mean that the previous callback is solved right away. In fact, it doesn’t… the code continues its execution straight into the second &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;permits&lt;/code&gt; hasn’t been decreased yet.&lt;/p&gt;

&lt;p&gt;There, you’ve been bitten by the Event Loop monster.&lt;/p&gt;

&lt;h2 id=&quot;a-fix-for-asyncsemaphore&quot;&gt;A fix for AsyncSemaphore&lt;/h2&gt;

&lt;p&gt;With our property-based test in place, it’s easy to change the code and see what happens. It is not without some irony that the bug is solved by a “permutation” of two lines of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first thing we do as soon as &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; is called, is to decrease the permit. We also change the condition to &lt;code class=&quot;highlighter-rouge&quot;&gt;permits &amp;lt; 0&lt;/code&gt; for obvious reasons. Fast-check finds no remaining counter-examples to our specified property. Everything is awesome™!&lt;/p&gt;

&lt;h2 id=&quot;testing-the-asyncqueue&quot;&gt;Testing the AsyncQueue&lt;/h2&gt;

&lt;p&gt;We start by writing how to generate a test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;asyncProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;anArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'E'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testAsyncQueueBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;numRuns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And proceed similarly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testAsyncQueueBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'E'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enqueues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;nx&quot;&gt;enqueues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
            &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enqueues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dequeues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
            &lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enqueues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Length should be equal minimum between enqueues and dequeues&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isLengthOk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; 

    &lt;span class=&quot;c1&quot;&gt;// Messages should be ordered&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isArraySorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isLengthOk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSorted&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we are looking for two properties instead of one:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;That the number of successful &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeues()&lt;/code&gt; is equal to the minimum between &lt;code class=&quot;highlighter-rouge&quot;&gt;enqueues&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeues&lt;/code&gt;; and&lt;/li&gt;
  &lt;li&gt;That all &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeues()&lt;/code&gt; are solved in order (thus preserving the FIFO property).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fast-check finds no counter-examples.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;There’s a subtle difference between doing the &lt;em&gt;right thing&lt;/em&gt; and doing the &lt;em&gt;thing right&lt;/em&gt;. Tests allow us to specify that, for very specific conditions, our result is what we expect it to be. But &lt;em&gt;specifications&lt;/em&gt;, in the sense of the &lt;em&gt;right thing&lt;/em&gt;, are way beyond what tests can achieve. Automatic checking of properties is a way to improve &lt;em&gt;confidence&lt;/em&gt; that our tests capture &lt;em&gt;more&lt;/em&gt; of the specification; which is an &lt;em&gt;indirect&lt;/em&gt; way to increase trust in our program &lt;em&gt;correctness&lt;/em&gt;. But don’t fool yourself: there’s &lt;strong&gt;absolutely nothing&lt;/strong&gt; that is able to tell you if your specification is &lt;em&gt;indeed&lt;/em&gt; right.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;Despite being a genious way beyond most of our capabilities, Donald Knuth said the following (unfortunate) words during a 2008 interview: &lt;em&gt;“Let me put it this way: During the past 50 years, I’ve written well over a thousand programs, many of which have substantial size. I can’t think of even five of those programs that would have been enhanced noticeably by parallelism or multithreading. Surely, for example, multiple processors are no help to TeX…”&lt;/em&gt; &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Actually, it requires two &lt;em&gt;types&lt;/em&gt; of time: the time to &lt;em&gt;do&lt;/em&gt; it, and the time to &lt;em&gt;communicate&lt;/em&gt; it. For all purposes of this rant, the &lt;em&gt;total time&lt;/em&gt; is the sum of these two things. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;
      &lt;p&gt;Unless you consider &lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;polling&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Busy_waiting&quot;&gt;busy-waiting&lt;/a&gt; as a solution. &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Some stubborn languages, like Java, didn’t knew how to pass functions as arguments for a long time. So the poor fellows wrapped up these functions in a (potentially anonymous) class with a well-known interface, instantiated an object, and passed that object instead. For all intended purposes — and notwithstanding scope and environment limitations that proper &lt;a href=&quot;https://en.wikipedia.org/wiki/Closure_(computer_programming)&quot;&gt;closures&lt;/a&gt; solve — we might also call these callbacks. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Why do I insist on using words like “decides” and “find appropriate”? Why not simply saying “when you’ve finished”? Well, because it’s not true. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Well, &lt;em&gt;two&lt;/em&gt; semaphores. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;It’s more common than you might think. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;This is not a bad thing &lt;em&gt;per se&lt;/em&gt;. The challenge was part of a &lt;a href=&quot;https://github.com/hugoferreira/asso-pipes-and-stuff-v19&quot;&gt;larger set of exercises&lt;/a&gt;, and the idea was for them to realize that one thing is to &lt;em&gt;think&lt;/em&gt; you understand asyncronicity, and another is to &lt;em&gt;realize&lt;/em&gt; that we are only humans after all. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;It’s a pickle that lead to one of the TDD tennets: you write your tests &lt;em&gt;before&lt;/em&gt; you write your implementation. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 16 Apr 2019 19:15:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2019/04/16/a-tale-of-async-and-tests/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/04/16/a-tale-of-async-and-tests/</guid>
        
        
        <category>Software</category>
        
      </item>
    
      <item>
        <title>Statistical Analysis of Bisca - Part I</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Bisca (a Portuguese version of the Italian game &lt;a href=&quot;https://en.wikipedia.org/wiki/Briscola&quot;&gt;Bríscola&lt;/a&gt;) is a trick-taking card game usually played by 2 players with the common 52-card French deck, but with the 8, 9 and 10’s of each suite removed, thus creating a 40-card deck. The main objective is to accumulate more points than the opponent, based on the cards that are captured and forfeited.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are several variations to this game; the one I learned in Portugal as a kid is called &lt;em&gt;Bisca dos 10&lt;/em&gt;, although the 9-, 7-, and 3-card variants seem more popular. For the purpose of this study we will use the following rules (and ignore the dealing ritual):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Each player starts with 10 cards drawn at random from the deck;&lt;/li&gt;
  &lt;li&gt;The remaining cards sit in a pile. The last card (bottom of the pile) is revealed and its suit used as the Trump;&lt;/li&gt;
  &lt;li&gt;The player who won the last round (or game), plays a card from his hand in the deal. The opponent then places one of his cards, following suit if possible&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which will determine whether he captures or forfeits the cards on the table, based on the following precedence: &lt;strong&gt;(a)&lt;/strong&gt; if the cards are the same suit, the highest value card (or the highest face number on non-value cards) wins; &lt;strong&gt;(b)&lt;/strong&gt; if there is a &lt;em&gt;trump card&lt;/em&gt; among them, who played the highest trump card wins; &lt;strong&gt;(c)&lt;/strong&gt; the first card played wins;&lt;/li&gt;
  &lt;li&gt;After the play each player takes a new card from the top of the deck, first the player who won the cards from the table. The whole procedure (1—5) is repeated, until;&lt;/li&gt;
  &lt;li&gt;When there are no more cards to be played, the captured cards values are counted up by adding their point values. Highest score wins.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lets-start-with-the-basics&quot;&gt;Let’s start with the basics…&lt;/h2&gt;

&lt;p&gt;The scoring is done according to the following table, and is independent of the suit:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Rank&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ace&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Seven&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;King&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Jack&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Queen&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(other)&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As we have 10 cards for each of the 4 suits, there are &lt;strong&gt;120 points in total at play&lt;/strong&gt;. Hence, to win, one must score more than 61.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. What’s the expected value of a player’s initial hand?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recall the &lt;a href=&quot;http://www.cse.iitd.ac.in/~mohanty/col106/Resources/linearity_expectation.pdf&quot;&gt;linearity of expectation&lt;/a&gt;. The mean (or expected value) is, by definition, the sum of all possible values multiplied by their respective probabilities. There are 4 suits for each rank, and we take 10 cards, so:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
10 \cdot\mu_X &amp;=&amp; 10\cdot\mathbb{E}[X] = 10\cdot\sum_{x\in X}x\cdot p(x) \\
      &amp;=&amp; 10 \cdot (11\cdot\frac{4}{40} + 10\cdot\frac{4}{40} + 4\cdot\frac{4}{40} + 3\cdot\frac{4}{40} + 2\cdot\frac{4}{40})\\
      &amp;=&amp; \class{bghighlight}{30}.
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Not so fast! Can you spot something funny?… That’s right, we aren’t considering the fact that once a card is drawn, it cannot be drawn again. In probability jargon, we call this &lt;strong&gt;sampling without replacement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;… but the joke is on us! The fact is that &lt;strong&gt;sampling without replacement doesn’t change expectation&lt;/strong&gt;. Why not? Well, consider the following scenario: draw 2 cards at random from a deck of 40. What is the probability that the first one is an Ace? &lt;sup&gt;4&lt;/sup&gt;/&lt;sub&gt;40&lt;/sub&gt;. What is the probability that the second one is an Ace? Yep, &lt;sup&gt;4&lt;/sup&gt;/&lt;sub&gt;40&lt;/sub&gt;, again! Without further knowledge, &lt;strong&gt;we have to treat each experience as independent&lt;/strong&gt;. Hence, what is the expected value for a single draw? $(11\cdot\frac{4}{40} + 10\cdot\frac{4}{40} + 4\cdot\frac{4}{40} + 3\cdot\frac{4}{40} + 2\cdot\frac{4}{40})$. And for ten draws? Exactly 10 times that.&lt;/p&gt;

&lt;p&gt;So the answer to the above question is that, on average, a &lt;strong&gt;player will initially hold 30 points&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. What’s the probability of missing one suit in the initial hand?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, you have just drawn 10 cards and you realised you have no Hearts. Let’s think in terms of cases. How many combinations are there of choosing 10 cards from 30 (since we’ve dropped a suit)? $\binom{30}{10}$. But we have also to consider every combination of 3 suits: $\binom{4}{3}$. Therefore:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P[\text{missing suit}] = \frac{\binom{4}{3}\binom{30}{10}}{\binom{40}{10}} ≈ \class{bghighlight}{14.2\%}&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;3. What’s the probability of having every suit in the initial hand?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By symmetry of the precedent, the probability of having at least one card of every suit is $1 - 14.2\% ≈ \class{bghighlight}{85.8\%}$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. What’s the probability of having exactly one Ace in the initial hand?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, there are 4 possible Aces, and 36 non-Aces. Take 9 from the later and 1 from the former and get:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P[\text{one Ace}] = \frac{\binom{4}{1}\binom{36}{9}}{\binom{40}{10}} ≈ \class{bghighlight}{44.4\%}&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;5. What’s the probability of having at least one Ace in the initial hand?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, a naive approach would be to sum the probabilities of having exactly 1, 2, 3 and 4 Aces, like so:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P[\text{at least one Ace}] = \frac{\binom{4}{1}\binom{36}{9} + \binom{4}{2}\binom{36}{8} + \binom{4}{3}\binom{36}{7} + \binom{4}{4}\binom{36}{6}}{\binom{40}{10}} ≈ \class{bghighlight}{70\%}&lt;/script&gt;

&lt;p&gt;Of course it would be easier to treat this by symmetry:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P[\text{at least one Ace}] = 1 - P[\text{no Ace}] = 1 - \frac{\binom{4}{0}\binom{36}{10}}{\binom{40}{10}} ≈ 1 - 0.2998 ≈ \class{bghighlight}{70\%}&lt;/script&gt;

&lt;p&gt;Note there is nothing special about the Ace. In fact, here’s something to remember: &lt;strong&gt;the probability of drawing a card of a certain rank in the initial hand is 70%&lt;/strong&gt;. This was the first counter-intuitive answer I calculated for this game… so counter-intuitive that I rushed to simulate it!&lt;/p&gt;

&lt;h2 id=&quot;a-small-interlude-to-talk-about-distributions&quot;&gt;A small interlude to talk about distributions…&lt;/h2&gt;

&lt;p&gt;The type of calculations we’ve been doing represent a pattern in probability theory: consider a finite population with $N$ elements, $K$ of which have a certain characteristic. Proceed to draw, without replacement, $n$ elements. What’s the probability of successfuly picking $k$ that possess that characteristic?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(X=k)=f(k; N, K, n)=\frac{\binom{K}{k}\binom{N-K}{n-k}}{\binom{N}{n}}&lt;/script&gt;

&lt;p&gt;We call this an &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypergeometric_distribution&quot;&gt;hypergeometric distribution&lt;/a&gt;, and there are a lot of properties mathematicians already studied about it. For our game, the probability of drawing $n$ ≤ 40 cards of a certain Rank with $k$ = {1, 2, 3, 4} successes is thus:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(\text{draw}~k~\text{cards of a certain rank})=f(k; 40, 4, n)=\frac{\binom{4}{k}\binom{36}{n-k}}{\binom{40}{n}}&lt;/script&gt;

&lt;h2 id=&quot;back-to-cards&quot;&gt;Back to cards…&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;6. What’s the expected number of Aces in the initial hand?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{x\in X}x\cdot p(x) = \frac{1\cdot\binom{4}{1}\binom{36}{9} + 2\cdot\binom{4}{2}\binom{36}{8} + 3\cdot\binom{4}{3}\binom{36}{7} + 4\cdot\binom{4}{4}\binom{36}{6}}{\binom{40}{10}} = \class{bghighlight}{1}.&lt;/script&gt;

&lt;p&gt;Spotted the symbol ($=$)? Not $≈ 1$, but &lt;strong&gt;exactly 1&lt;/strong&gt;; second counter-intuitive result, considering the 70% probability of having at least one Ace! But if we check the mean of an hypergeometric distribution, we observe it’s equal to $n\frac{K}{N}$, hence: $10\cdot\frac{4}{40} = 1$. Coincidence?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OMG!&lt;/strong&gt; Once again, we are overlooking the fact that &lt;strong&gt;sampling without replacement doesn’t change expectation&lt;/strong&gt;. The probability of drawing an Ace is &lt;sup&gt;4&lt;/sup&gt;/&lt;sub&gt;40&lt;/sub&gt; = 0.1. So how many Aces are we expecting to find in ten draws?… Yep, it’s almost humiliating.&lt;/p&gt;

&lt;h2 id=&quot;another-small-interlude-to-talk-about-proofs&quot;&gt;Another small interlude to talk about proofs…&lt;/h2&gt;

&lt;p&gt;Can we prove once and for all that sampling without replacement doesn’t change expectation? It’s not easy (at least for me it wasn’t). We need to observe two important identities, &lt;em&gt;viz&lt;/em&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x\binom{K}{x} = \frac{xK!}{x!(K-x)!} = \frac{K!}{(x-1)!(K-x)!} = \frac{K(K-1)!}{(x-1)!((K-1) - (k-1))!} = K\binom{K-1}{x-1}&lt;/script&gt;

&lt;p&gt;… and the second one:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\binom{N}{n} = \frac{N!}{n!(N-n)!} = \frac{N(N-1)!}{n(n-1)!((N-1)-(n-1))!} = \frac{N}{n}\binom{N-1}{n-1}&lt;/script&gt;

&lt;p&gt;Now, the trick is to reduce an ugly summation of type $\sum_x xf(x)$ into something tractable. Observe that&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{x = 0}^{n} \frac{\binom{K}{x}\binom{N-K}{n-x}}{\binom{N}{n}} = 1&lt;/script&gt;

&lt;p&gt;From these, we can proceed with the calculation:&lt;/p&gt;

&lt;p&gt;$\phantom{\equiv}~\mu_X = \sum_{x = 0}^{n} x\cdot\frac{\binom{K}{x}\binom{N-K}{n-x}}{\binom{N}{n}}$ &lt;br /&gt;
$\equiv$ { apply first identity }&lt;br /&gt;
$\phantom{\equiv}~\sum_{x = 0}^{n} K\frac{\binom{K-1}{x-1}\binom{N-K}{n-x}}{\binom{N}{n}}$ &lt;br /&gt;
$\equiv$ { apply second identity }&lt;br /&gt;
$\phantom{\equiv}~\sum_{x = 0}^{n} K\frac{\binom{K-1}{x-1}\binom{N-K}{n-x}}{\frac{N}{n}\binom{N-1}{n-1}}$ &lt;br /&gt;
$\equiv$ { since $ \frac{1}{a/b} = {b/a} $ }&lt;br /&gt;
$\phantom{\equiv}~\sum_{x = 0}^{n} K\frac{n}{N}\frac{\binom{K-1}{x-1}\binom{N-K}{n-x}}{\binom{N-1}{n-1}}$ &lt;br /&gt;
$\equiv$ { since $ \sum C\cdot a = C\sum a $ }&lt;br /&gt;
$\phantom{\equiv}~K\frac{n}{N}\sum_{x = 0}^{n} \frac{\binom{K-1}{x-1}\binom{N-K}{n-x}}{\binom{N-1}{n-1}}$ &lt;br /&gt;
$\equiv$ { since $ a-b = (a-1)-(b-1) $ }&lt;br /&gt;
$\phantom{\equiv}~K\frac{n}{N}\sum_{x = 0}^{n} \frac{\binom{K-1}{x-1}\binom{(N-1)-(K-1)}{(n-1)-(x-1)}}{\binom{N-1}{n-1}}$ &lt;br /&gt;
$\equiv$ { basic substitution to apply third identity }&lt;br /&gt;
$\phantom{\equiv}~\mu_X = \frac{nK}{N}$ &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Ufff!&lt;/p&gt;

&lt;h2 id=&quot;we-were-talking-about-cards&quot;&gt;We were talking about cards…&lt;/h2&gt;

&lt;p&gt;Yes. Yes, we were… But the length of this post is running out of control, so we will get back to interesting statistical facts about Bisca in &lt;a href=&quot;&quot;&gt;Part II&lt;/a&gt; of this essay, where I will cover conditional probabilities, namely what can you assume about your opponent game &lt;em&gt;after&lt;/em&gt; you’ve observed your own hand.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Again, there are variations to the &lt;em&gt;following suit&lt;/em&gt; protocol. In one variation &lt;strong&gt;(1)&lt;/strong&gt; the opponent must &lt;strong&gt;always follow suit&lt;/strong&gt;, or else he &lt;strong&gt;forfeits the game&lt;/strong&gt;. Others &lt;strong&gt;(2)&lt;/strong&gt; only trigger this rule when there are no more cards to be drawn from the pile. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Here I am, showing off with mathematical proofs, and I just conjured an unproven identity by classifying it as &lt;em&gt;known&lt;/em&gt;. The proof uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Vandermonde%27s_identity&quot;&gt;Vandermonde’s Identity&lt;/a&gt;, where $\sum_{x=0}^n\binom{a}{x}\binom{b}{n-x}$ = $\binom{a+b}{n}$. Since $1/\binom{N}{n}$ is a constant in the summation, it follows that $1/\binom{N}{n}\sum_{x=0}^n\binom{K}{x}\binom{N-K}{n-x}$ = $1/\binom{N}{n}\cdot\binom{K+N-K}{n}$ = $\binom{N}{n}/\binom{N}{n}$ = $1$. I leave as an exercise to the reader to prove Vandermonde’s Identity. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 04 Sep 2017 00:46:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2017/09/04/statistical-analysis-of-bisca/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/09/04/statistical-analysis-of-bisca/</guid>
        
        
        <category>Mathematics</category>
        
      </item>
    
      <item>
        <title>Circles, Spheres and Hyper-Spheres</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Consider a unitary, 100-dimensional, hyper-sphere. What proportion of its volume lies within the last 0.01 of its radius?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an odd question, no doubt; a 100-dimensional hyper-sphere, whatever that is. But there’s a moral to this puzzle that will become evident if we do baby steps:&lt;/p&gt;

&lt;h2 id=&quot;lets-dumb-this-down&quot;&gt;Let’s dumb this down…&lt;/h2&gt;

&lt;p&gt;Imagine instead that we wanted to tackle the following simplified version:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consider a unitary circle. How much of its area (in %) lies in the last 0.2 of its radius?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems easy to calculate this; the area $A$ of a circle of radius $r$ is given by $A_r = \pi\cdot r^2$. Hence:&lt;/p&gt;

&lt;p&gt;$\phantom{\equiv}~\frac{A_{[0.8; 1]}}{A_1}$ &lt;br /&gt;
$\equiv$ { equal to the difference between the two areas }&lt;br /&gt;
$\phantom{\equiv}~\frac{A_1 - A_{0.8}}{A_1}$ &lt;br /&gt;
$\equiv$ { by definition }&lt;br /&gt;
$\phantom{\equiv}~\frac{\pi - \pi \cdot 0.8^2}{\pi}$ &lt;br /&gt;
$\equiv$ { since $\frac{ab-ac}{a} = b-c$ }&lt;br /&gt;
$\phantom{\equiv}~1 - 0.8^2 = \class{bghighlight}{0.36}$&lt;/p&gt;

&lt;p&gt;Easy! So, &lt;strong&gt;36% of the area&lt;/strong&gt; of a circle lies within the &lt;strong&gt;last 0.2 outer ring&lt;/strong&gt;. Hmmm… that much? I wonder, what’s the proportion of the area that lies within the &lt;em&gt;first&lt;/em&gt; 0.2 inner ring?&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{A_{[0; 0.2]}}{A_1} = \frac{A_{0.2}}{\pi} = \frac{\pi \cdot 0.2^2}{\pi} = \class{bghighlight}{0.04}&lt;/script&gt;

&lt;p&gt;So, the &lt;strong&gt;inner ring of the same thickness contains just 4%&lt;/strong&gt; of the total area. Should this come as a surprise? The inner ring is far smaller than the outer ring, isn’t it?…&lt;/p&gt;

&lt;pre&gt;
  &lt;svg width=&quot;206px&quot; height=&quot;206px&quot; style=&quot;display: block; margin: auto&quot;&gt;
    &lt;circle cx=&quot;103&quot; cy=&quot;103&quot; r=&quot;90&quot; style=&quot;stroke: hsl(0, 40%, 80%); stroke-width: 20px; fill: none&quot; /&gt;
    &lt;circle cx=&quot;103&quot; cy=&quot;103&quot; r=&quot;100&quot; style=&quot;stroke: hsl(0, 40%, 50%); fill: none&quot; /&gt;
    &lt;circle cx=&quot;103&quot; cy=&quot;103&quot; r=&quot;80&quot; style=&quot;stroke: hsl(0, 40%, 50%); fill: none&quot; /&gt;
    &lt;circle cx=&quot;103&quot; cy=&quot;103&quot; r=&quot;20&quot; style=&quot;stroke: hsl(0, 40%, 50%); fill: hsl(0, 40%, 80%)&quot; /&gt;
  &lt;/svg&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;can-we-have-a-simulation-for-table-3-please&quot;&gt;Can we have a simulation for table 3, please?&lt;/h2&gt;

&lt;p&gt;If intuition is failing you, or you think there might be something wrong with our calculations, we can attempt to simulate this by generating a pair of random numbers between [-1, 1], which would correspond to coordinates in a cartesian space delimited by a square of side 2 (and, therefore, with an area of 4). As we approach an infinite number of points, the proportion of those that fall into the circle would give us the area of the circle. This is called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo Simulation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How do we know if a point felt inside the circle? Easy… We calculate the distance of that point to the origin, which, according to the Pythagora’s theorem, is given by $d_{x,y} = \sqrt{x^2 + y^2}$. If the distance is less than or equal to one, it’s inside the circle:&lt;/p&gt;

&lt;div class=&quot;visualization&quot;&gt;
  &lt;span id=&quot;hitmap&quot;&gt;&lt;/span&gt;
  &lt;div class=&quot;h-vis&quot;&gt;
    &lt;span id=&quot;statistics&quot;&gt;
      Number of points &lt;span id=&quot;iterations&quot;&gt;0&lt;/span&gt;&lt;br /&gt;
      Ratio is &lt;span id=&quot;ratio&quot;&gt;00.00&lt;/span&gt;% (real 78.54%)&lt;br /&gt;
      Estimated area is &lt;span id=&quot;estimated-area&quot;&gt;0.000&lt;/span&gt; (real 3.141)&lt;br /&gt;
      Outer 0.2 ring area is &lt;span id=&quot;outer-ring&quot;&gt;00&lt;/span&gt;% (real 36%)&lt;br /&gt;
    &lt;/span&gt;
    &lt;span id=&quot;histogram&quot;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Click to add &lt;a href=&quot;javascript:simulate(100)&quot;&gt;100&lt;/a&gt;, &lt;a href=&quot;javascript:simulate(1000)&quot;&gt;1000&lt;/a&gt;, or &lt;a href=&quot;javascript:simulate(10000)&quot;&gt;10000&lt;/a&gt; points, &lt;a href=&quot;javascript:startAnimation()&quot;&gt;start&lt;/a&gt; or &lt;a href=&quot;javascript:stopAnimation()&quot;&gt;stop&lt;/a&gt; the animation, or &lt;a href=&quot;javascript:reset()&quot;&gt;reset&lt;/a&gt; the simulation.&lt;/p&gt;

&lt;h2 id=&quot;we-shall-now-go-3d&quot;&gt;We shall now go 3D…&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consider a unitary sphere. How much of its volume (in %) lies in the last 0.2 of its radius?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let $V_r$ be the volume of a sphere of radius $r$, given by $V_r = \frac{4}{3}\pi\cdot r^3$; therefore:&lt;/p&gt;

&lt;p&gt;$\phantom{\equiv}~\frac{V_{[0.8; 1]}}{V_1}$ &lt;br /&gt;
$\equiv$ { equal to the difference between the two areas }&lt;br /&gt;
$\phantom{\equiv}~\frac{V_1 - V_{0.8}}{V_1}$ &lt;br /&gt;
$\equiv$ { by definition }&lt;br /&gt;
$\phantom{\equiv}~\frac{\frac{4}{3}\pi - \frac{4}{3}\pi\cdot 0.8^3}{\frac{4}{3}\pi}$ &lt;br /&gt;
$\equiv$ { since $\frac{ab-ac}{a} = b-c$ }&lt;br /&gt;
$\phantom{\equiv}~1 - 0.8^3 = \class{bghighlight}{0.512}$&lt;/p&gt;

&lt;p&gt;This is getting interesting: &lt;strong&gt;more than 50% of its volume lies within the last 20% of a sphere!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;hyper-spheres&quot;&gt;Hyper-Spheres&lt;/h2&gt;

&lt;p&gt;I’m skipping the mathematical apparatus of integrating in higher dimensions (something that can be read in &lt;a href=&quot;https://en.wikipedia.org/wiki/N-sphere&quot;&gt;Wikipedia&lt;/a&gt;), and instead rely on Wolfram Alpha to check the volume of a &lt;a href=&quot;https://www.wolframalpha.com/input/?i=volume+of+4-sphere&amp;amp;rawformassumption=%7B%22DPClash%22,+%22GeometryE%22,+%224-sphere%22%7D+-%3E+%7B%7B%22Hypersphere%22,+4%7D%7D&quot;&gt;4d-sphere&lt;/a&gt; $(\frac{1}{2}\pi^2 r^4 ≈ 4.9348\cdot r^4)$, &lt;a href=&quot;https://www.wolframalpha.com/input/?i=volume+of+5-sphere&amp;amp;rawformassumption=%7B%22DPClash%22,+%22GeometryE%22,+%225-sphere%22%7D+-%3E+%7B%7B%22Hypersphere%22,+5%7D%7D&quot;&gt;5d-sphere&lt;/a&gt; $(\frac{8}{15}\pi^2 r^5 ≈ 5.26379\cdot r^5)$, and &lt;a href=&quot;https://www.wolframalpha.com/input/?i=volume+of+6-sphere&amp;amp;rawformassumption=%7B%22DPClash%22,+%22GeometryE%22,+%226-sphere%22%7D+-%3E+%7B%7B%22Hypersphere%22,+6%7D%7D&quot;&gt;6d-sphere&lt;/a&gt; $(\frac{1}{6}\pi^3 r^6 ≈ 5.16771\cdot r^6)$.&lt;/p&gt;

&lt;p&gt;It now may be evident to the reader that the volume of a $d$-sphere of radius $r$ is always proportional to $r^d$ (we may write this as $V_r^d \propto r^d$) and so the percentage of volume that lies within the last shell of thickness $q$ is given by $1 - q^d$.&lt;/p&gt;

&lt;p&gt;What is thus the percentage of the volume that lies within the last 0.2 of a 100-dimensional hypersphere? $1 - 0.8^{100} = \class{bghighlight}{99.99999997963\%}$. &lt;strong&gt;And within the last 0.01? 63.4%…&lt;/strong&gt; Wow!&lt;/p&gt;

&lt;p&gt;In fact, if we solve the equation for $1 - x^{100} = 0.99 \equiv x ≈ 0.95$, we conclude that &lt;strong&gt;99% of the volume of a 100-dimensional hypersphere lies within the outer shell of 0.05 thickness.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Aug 2017 15:32:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2017/08/04/circles-spheres-and-hyperspheres/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/08/04/circles-spheres-and-hyperspheres/</guid>
        
        
        <category>Mathematics</category>
        
      </item>
    
      <item>
        <title>On More Prisoners</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;100 prisoners are imprisoned in solitary cells. Each cell is windowless and soundproof (i.e., there’s absolutely no way to exchange information among them once they are imprisoned). There’s a central room with one light bulb; the bulb is initially off. No prisoner can see the light bulb from his or her own cell. Each day, the warden picks a prisoner equally at random, and that prisoner visits the central room; at the end of the day the prisoner is returned to his cell. While in the room, the prisoner can toggle the bulb if he or she wishes. Also, the prisoner has the option of asserting the claim that all 100 prisoners have been to the room. If this assertion is false (that is, some prisoners still haven’t been to the room), they loose. If it is indeed true, all prisoners are set free. Thus, the assertion should only be made if the prisoner is 100% certain of its validity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The solution to this puzzle is well known. Before being imprisoned, they agree on a protocol. Here, a &lt;em&gt;counter&lt;/em&gt; is elected: a special prisoner that behaves differently from everyone else. Whenever someone (who’s not the counter) goes into the room, and find the switch in the &lt;em&gt;off&lt;/em&gt; position, it turns it &lt;em&gt;on&lt;/em&gt;. But it only does this once. And whenever the &lt;em&gt;counter&lt;/em&gt; goes into the room and finds the switch in the &lt;em&gt;on&lt;/em&gt; position, it turns it &lt;em&gt;off&lt;/em&gt;, and counts plus one. When the counter reaches 99, then he knows for certain that everyone was called before. Now here’s the real question we want to tackle:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How long would it take on average, using the aforementioned strategy, for the prisoners to be released?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;first-approach&quot;&gt;First approach&lt;/h2&gt;

&lt;p&gt;Let $C$ be a random variable that denotes the counter being called, and $NC$ a non-counter. Then:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray*}
 C &amp;\sim&amp; \text{NB}(1; \frac{1}{100}) \\
 NC(x) &amp;\sim&amp; \text{NB}(1; \frac{x}{100})
\end{eqnarray*} %]]&gt;&lt;/script&gt;

&lt;p&gt;… where $x$ is the number of prisoners that are yet to be accounted for; this step is important, since every time a prisoner turns on a switch, the probability of picking one that is yet to perform such action decreases.&lt;/p&gt;

&lt;p&gt;Finally, we can express the expected value as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i=1}^{99} { \mathbb{E}[C] + \mathbb{E}[NC(100-i)]}&lt;/script&gt;

&lt;h2 id=&quot;lets-remember-some-useful-stuff&quot;&gt;Let’s remember some useful stuff&lt;/h2&gt;

&lt;p&gt;Recall the linearity of expectation; a negative binomial can be expanded as something like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;case&lt;/th&gt;
      &lt;th&gt;calls&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;p&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;$p$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;qp&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;$pq$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;qqp&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;$pq^2$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;n&lt;/td&gt;
      &lt;td&gt;$pq^{n-1}$&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The mean (or expected value) is, by definition, the sum of all possible values multiplied by their respective probabilities:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation*}
\mu_X = \mathbb{E}[X] = \sum_{x\in X}x\cdot p(x)
\end{equation*}&lt;/script&gt;

&lt;p&gt;Hence, considering $q = (1-p)$:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;1p + 2pq + 3pq^2 + \cdots + npq^{n-1} = \sum_{i=1}^{\infty} np(1-p)^{n-1} = \frac{1}{p}&lt;/script&gt;

&lt;p&gt;It is easy to see that the infinite sum converges. And since $p=\frac{1}{100}$, then $\mathbb{E}[C] = \class{bghighlight}{100}$. The conclusion is actually very intuitive: on average, one has to call 100 prisoners before our &lt;em&gt;counter&lt;/em&gt; is selected.&lt;/p&gt;

&lt;h2 id=&quot;i-heard-something-about-distributions&quot;&gt;I heard something about “distributions”…&lt;/h2&gt;

&lt;p&gt;Alternatively, we also know that the expected value of a random variable following a &lt;a href=&quot;https://en.wikipedia.org/wiki/Negative_binomial_distribution&quot;&gt;negative binomial distribution&lt;/a&gt;, up to and including the success event happening ($r = 1$, where $r$ is the number of successes that need to happen), is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbb{E}[C] = r\frac{1-p}{p} +1= 1\frac{1-\frac{1}{100}}{\frac{1}{100}} + 1 = \class{bghighlight}{100}&lt;/script&gt;

&lt;p&gt;Similarly, the expected value for a prisioner that has never turned on the switch, and considering that the probability depends on how many prisoners still have that property&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbb{E}[NC(x)] = 1\frac{1-\frac{x}{100}}{\frac{x}{100}} + 1 = \frac{100}{x}&lt;/script&gt;

&lt;p&gt;…where &lt;script type=&quot;math/tex&quot;&gt;x = \{99, 98, \ldots, 1\}&lt;/script&gt;. We now have all the elements to calculate the expected value, so:&lt;/p&gt;

&lt;p&gt;$\phantom{\equiv}~\sum_{i=1}^{99} \mathbb{E}[C] + \mathbb{E}[NC(100-i)]$ &lt;br /&gt;
$\equiv$ { since $\Sigma (a+b) = \Sigma a+\Sigma b$ }&lt;br /&gt;
$\phantom{\equiv}~\sum_{i=1}^{99} \mathbb{E}[C] + \sum_{i=1}^{99} \mathbb{E}[NC(100-i)]$ &lt;br /&gt;
$\equiv$ { solving left side } &lt;br /&gt;
$\phantom{\equiv}~9900 + \sum_{i=1}^{99} \mathbb{E}[NC(100-i)]$ &lt;br /&gt;
$\equiv$ { by definition } &lt;br /&gt;
$\phantom{\equiv}~9900 + \sum_{i=1}^{99} \frac{100}{100-i}$ &lt;br /&gt;
$\equiv$ { solving right side } &lt;br /&gt;
$\phantom{\equiv}~9900 + 517.74 = \class{bghighlight}{10417.74}$&lt;/p&gt;

&lt;h2 id=&quot;simulation&quot;&gt;Simulation&lt;/h2&gt;

&lt;p&gt;I like to solve the same problem using more than one technique; so, as always, we shall simulate it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;simIter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;simulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; 
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
                             &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counterGuy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counterGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;simIter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;simIter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; simulations] Expected value = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;fancy-chart&quot;&gt;Fancy chart&lt;/h2&gt;

&lt;p&gt;Of course, the Expected Value is exactly what the name says: expected. On average, it is 10417.74, but in reality it is a random variable that follows a normal distribution, centered at that value. We can run the above simulation, say, $n = 500$ times, and then plot an histogram to get the feeling of it, like so:&lt;/p&gt;

&lt;div id=&quot;histogram&quot;&gt;&lt;/div&gt;

&lt;p&gt;You can &lt;a href=&quot;javascript:update();&quot;&gt;add 500 more simulations to the run&lt;/a&gt;, &lt;a href=&quot;javascript:update(1000);&quot;&gt;1000&lt;/a&gt;, or &lt;a href=&quot;javascript:update(10000);&quot;&gt;10000&lt;/a&gt;, or &lt;a href=&quot;javascript:restart();&quot;&gt;start fresh&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Expressing the same using linearity of expectation is left as an exercise to the reader. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 02 Jul 2017 11:30:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2017/07/02/on-more-prisioners/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/07/02/on-more-prisioners/</guid>
        
        
        <category>Mathematics</category>
        
      </item>
    
      <item>
        <title>Square Hunch</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Let $a_0, a_1, a_2, …$ be a sequence of integers, where $a_{m+n} + a_{m-n} = ½(a_{2m}+a_{2n})$. If $a_1 = 1$, what would be the value of $a_{1997}$?&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing one should do when trying to tackle something like this is to &lt;em&gt;“check out the terrain”&lt;/em&gt;. I would be very tempted to write a computer program to find the values for me right away, but where should the program start from, considering that this is a recurrence? We do know how to implement &lt;em&gt;recursive functions&lt;/em&gt;, but the way the recurrence is formulated, it’s not straightfoward to define it.&lt;/p&gt;

&lt;h2 id=&quot;release-the-mathematician-in-you&quot;&gt;Release the mathematician in you&lt;/h2&gt;

&lt;p&gt;Let’s try to tackle this problem analitically and without computer aid. Where to begin? What about trying to establish a kind of &lt;em&gt;ground truth&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1. Check out the terrain&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let $m = 0$, $n = 0$, then:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
a_0 + a_0 = \frac{1}{2}(a_0+a_0) ⇔ 2a_0 = a_0 ⇔ a_0 = 0
\end{equation}&lt;/script&gt;

&lt;p&gt;Great, we now have two data points: $a_0$ and $a_1$. Can we try and generalize the equation?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2. Find the general equivalence for some fixed values&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Assuming we fix $n = 0$, the recurrence becomes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
a_m + a_m = \frac{1}{2}(a_{2m}+a_0) ⇔ 2a_m = \frac{1}{2}a_{2m} ⇔ \class{bghighlight}{4a_m = a_{2m}}
\end{equation}&lt;/script&gt;

&lt;p&gt;This equation&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; is neat for two things: (i) it no longer depends on two variables ($n$ and $m$), and thus can provide a solution given the exact index we want to compute; and (ii) if we multiply the current value by 4, we get the solution for the current index $\times$ 2.&lt;/p&gt;

&lt;p&gt;With this result in mind, let’s calculate a few more values:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Index&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_0$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;0&lt;/strong&gt; { as calculated }&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_1$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1&lt;/strong&gt; { as given }&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_2$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;4&lt;/strong&gt; { $= 4a_1$ }&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_3$&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_4$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;16&lt;/strong&gt; { $= 4a_2$ }&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_5$&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_6$&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_7$&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_8$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;64&lt;/strong&gt; { $= 4a_4$ }&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Step 3. Fill some holes to get a clear picture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we’ve already gathered some solutions, let’s attempt to calculate $a_3$. Let $m = 2$, $n = 1$, then:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
a_{2+1} + a_{2-1} = \frac{1}{2}(a_4+a_2) ⇔ a_3 + 1 = \frac{1}{2}(16+4) ⇔ \class{bghighlight}{a_3 = 9}
\end{equation}&lt;/script&gt;

&lt;p&gt;… wait a minute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4. Establish an hypothesis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Could it be that $\class{bghighlight}{H(a_k = k^2)}$? If so, then $a_5 \stackrel{?}{=} 25$. Shall we try it out? Let $m = 4$, $n = 1$, then:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
a_{4+1} + a_{4-1} = \frac{1}{2}(a_8+a_2) ⇔ a_5 + 9 = \frac{1}{2}(64+4) ⇔ a_5 = 25
\end{equation}&lt;/script&gt;

&lt;p&gt;Hurray! We now know a lot more about the recurrence:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Index&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
      &lt;th&gt;Hypothesis&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_0$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;$0^2$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_1$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;$1^2$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_2$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;$2^2$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_3$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;$3^2$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_4$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;16&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;$4^2$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_5$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;$5^2$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_6$&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;$6^2 = 36$ ?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_7$&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;$7^2 = 42$ ?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$a_8$&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;64&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;$8^2$&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Step 5. Prove it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yeah, yeah… by now most of us would be convinced that we reached an easy solution to get us to $a_{1997}$, but how can we be certain that our hypothesis will not fail with larger numbers? Well, we must prove it… And prove it we will!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5.1. Choose a proof approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Think about it… We are trying to prove &lt;em&gt;sequences&lt;/em&gt;, and we already know some lower values of the sequence. We want to prove that our hypothesis is valid for every element of the sequence. This smells a lot like &lt;em&gt;induction&lt;/em&gt;, particularly  &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_induction#Complete_induction&quot;&gt;&lt;em&gt;strong induction&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;strong induction&lt;/em&gt; we assume that when attempting to prove an hypothesis $H$, then:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
∀_k : H(k_0) ∧ H(k_0 + 1) ∧ H(k_0 + 2) ∧ \cdots ∧ H(k) ⇒ H(k+1)
\end{equation}&lt;/script&gt;

&lt;p&gt;… in other words, if the inductive hypothesis holds for all values up to $k$, starting from a base value $k_0$, then it &lt;em&gt;must&lt;/em&gt; hold for $k+1$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5.2. Induction it is! Test the base case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Does $H(k = 0)$ hold? Yep, since $0^2 = 0 = a_0$. We also know that for $H(k = 1) ≡ 1^2 = 1 = a_1$, and for $H(k = 2) ≡ 2^2 = 4 = a_2$, so although unecessary, it boosts our confidence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5.3. Demonstrate the inductive step&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we assume that, since our hypothesis hold for $k = 0, 1, 2, …, x$  it must hold for $k = x+1$:&lt;/p&gt;

&lt;p&gt;$a_{x+1} + a_{x-1} = \frac{1}{2}(a_{2x}+a_{2\times 1})$ &lt;br /&gt;
$≡$ { since $4a_m = a_{2m}$ } &lt;br /&gt;
$a_{x+1} + a_{x-1} = \frac{1}{2}(4a_{x}+a_{2})$ &lt;br /&gt;
$≡$ { given that $a_k = k^2$ } &lt;br /&gt;
$a_{x+1} + (x-1)^2 = \frac{1}{2}(4x^2+a_{2})$ &lt;br /&gt;
$≡$ { knowing that $a_2 = 4$ } &lt;br /&gt;
$a_{x+1} + (x-1)^2 = 2x^2+2$ &lt;br /&gt;
$≡$ { since $(a-b)^2 = (a^2-2ab+b^2)$ } &lt;br /&gt;
$a_{x+1} = 2x^2+2 - (x^2-2x+1)$&lt;br /&gt;
$≡$ { simplifying } &lt;br /&gt;
$a_{x+1} = x^2+2x+1$&lt;br /&gt;
$≡$ { since $(a+b)^2 = (a^2+2ab+b^2)$ } &lt;br /&gt;
$a_{x+1} = (x+1)^2$&lt;br /&gt;
$≡$ { let $k=x+1$ } &lt;br /&gt;
$\class{bghighlight}{a_k = k^2}$ Q.E.D.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6. Pown that puzzle!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$\class{bghighlight}{a_{1997} = 1997^2 = 3988009}$. Easy, uh?&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;I first read about this puzzle on “&lt;a href=&quot;https://www.amazon.com/Art-Craft-Problem-Solving/dp/0471789011/ref=sr_1_1?ie=UTF8&amp;amp;qid=1498345535&amp;amp;sr=8-1&amp;amp;keywords=art+craft+problem+solving&quot;&gt;&lt;em&gt;The Art and Craft of Problem Solving&lt;/em&gt;&lt;/a&gt;” by Paul Zeitz. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;If you are wondering why I didn’t simplified it instead as $a_m = \frac{a_{2m}}{4}$, it’s because we are usually “peeking” incrementally (i.e. from lower to upper indexes in the sequence), so it’s typically more useful to have something that can provide a solution based on previous results. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 24 Jun 2017 19:30:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2017/06/24/Square-Hunch/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/06/24/Square-Hunch/</guid>
        
        
        <category>Mathematics</category>
        
      </item>
    
      <item>
        <title>Exercises in Program Design by Calculation</title>
        <description>&lt;p&gt;Below you can find some examples on correctness checking and derivation through calculation of simple programs. These exercises are part of the &lt;em&gt;Formal Methods in Software Engineering&lt;/em&gt; course given at the &lt;em&gt;Masters in Informatics Engineering&lt;/em&gt; at the &lt;em&gt;Faculty of Engineering, University of Porto&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Find the &lt;em&gt;Weakest Precondition&lt;/em&gt; of the following:&lt;/p&gt;

&lt;p&gt;1.1. $\{wp\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;b:=c+1; a:=c+2&lt;/code&gt; $\{c&amp;lt;b ∧ b&amp;lt;a\}$&lt;/p&gt;

&lt;p&gt;$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;b:=c+1&lt;/code&gt;, $wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;a:=c+2&lt;/code&gt;, $c&amp;lt;b ∧ b&amp;lt;a))$ &lt;br /&gt;
$≡$ { Successive application of the assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt; rule } &lt;br /&gt;
$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;a:=c+2&lt;/code&gt;, $c&amp;lt;b ∧ b&amp;lt;a) → c&amp;lt;b ∧ b&amp;lt;c+2$ &lt;br /&gt;
$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;b:=c+1&lt;/code&gt;, $c&amp;lt;b ∧ b&amp;lt;c+2) → c&amp;lt;c+1 ∧ c+1&amp;lt;c+2 ≡$&lt;span class=&quot;bghighlight&quot;&gt; $\text{True}$ &lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;1.2. $\{wp\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;if (a&amp;gt;b) then c:=a&lt;/code&gt; $\{ c=\text{max}(a,b) \}$&lt;/p&gt;

&lt;p&gt;If we assume this definition:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\text{max}(a,b) ≜ \begin{cases} a &amp;\mbox{if } a &gt; b \\
b &amp; \mbox{if } a ≤ b \end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;It follows that:&lt;/p&gt;

&lt;p&gt;$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;if (a&amp;gt;b) then c:=a&lt;/code&gt;, $c=\text{max}(a,b))$ &lt;br /&gt;
$≡$ { By the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; rule } &lt;br /&gt;
$a&amp;gt;b ∧ wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;c:=a&lt;/code&gt;, $c=\text{max}(a,b)) ∨ a≤b ∧ wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt;, $c=\text{max}(a,b))$ &lt;br /&gt;
$≡$ { Assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt; rule } &lt;br /&gt;
$a&amp;gt;b ∧ a=\text{max}(a,b) ∨ a≤b ∧ c=\text{max}(a,b)$ &lt;br /&gt;
$≡$ { By the definition of $\text{max}(a,b)$ } &lt;br /&gt;
$a&amp;gt;b ∧ a=a ∨ a≤b ∧ c=b$ &lt;br /&gt;
$≡$ { Identity } &lt;br /&gt;
$a&amp;gt;b ∨ a≤b ∧ c=b$ &lt;br /&gt;
$≡$ { Distributive Property of ∨ } &lt;br /&gt;
$(a&amp;gt;b ∨ a≤b) ∧ (a&amp;gt;b ∨ c=b)$ &lt;br /&gt;
$≡$ { Left identity of ∧, since $(a&amp;gt;b ∨ a≤b)$ is a tautology } &lt;br /&gt;
&lt;span class=&quot;bghighlight&quot;&gt; $a&amp;gt;b ∨ c=b$ &lt;/span&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Find if the following triplets hold (i.e., &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt;), by calculating the &lt;em&gt;Weakest Precondition&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;2.1. $\{y=3\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;y:=x-y; x:=y+1; y:=x-1&lt;/code&gt; $\{y&amp;lt;x\}$&lt;/p&gt;

&lt;p&gt;First we calculate the weakest precondition:&lt;/p&gt;

&lt;p&gt;$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;y:=x-y&lt;/code&gt;, $wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;x:=y+1&lt;/code&gt;, $wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;y:=x-1&lt;/code&gt;, $y &amp;lt; x)))$ &lt;br /&gt;
$≡$ { Successive application of the assignment  &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt; rule } &lt;br /&gt;
$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;y:=x-1&lt;/code&gt;, $y&amp;lt;x) → x-1&amp;lt;x$ &lt;br /&gt;
$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;x:=y+1&lt;/code&gt;, $x-1&amp;lt;x) → y&amp;lt;y+1 ≡ y&amp;lt;y+1$ &lt;br /&gt;
$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;y:=x-y&lt;/code&gt;, $y&amp;lt;y+1) → x-y &amp;lt; (x-y)+1 ≡ \text{True}$&lt;/p&gt;

&lt;p&gt;Now we need to prove that the implication holds:&lt;/p&gt;

&lt;p&gt;$(y=3)→\text{True}→\:?→$&lt;span class=&quot;bghighlight&quot;&gt; $\text{True}$ &lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;2.2. $\{x≥-100 ∧ x≤100\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;if (x&amp;lt;0) then x:=x+100 else y:=2*x fi&lt;/code&gt; $\{y≥0 ∧ y≤300\}$&lt;/p&gt;

&lt;p&gt;First we calculate the weakest precondition:&lt;/p&gt;

&lt;p&gt;$wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;if (x&amp;lt;0) then x:=x+100 else y:=2*x fi&lt;/code&gt;, $0 ≤ y≤300)$ &lt;br /&gt;
$≡$ { By the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; rule } &lt;br /&gt;
$x&amp;lt;0 ∧ wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;x:=x+100&lt;/code&gt;, $0≤y≤300) ∨ x≥0 ∧ wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;y:=2*x&lt;/code&gt;, $0≤y≤300)$ &lt;br /&gt;
$≡$ { Assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt; rule } &lt;br /&gt;
$x&amp;lt;0 ∧ 0≤y≤300 ∨ x≥0 ∧ 2x≥0 ∧ 2x≤300$ &lt;br /&gt;
$≡$ { Algebra and set theory } &lt;br /&gt;
$x&amp;lt;0 ∧ 0≤y≤300 ∨ 0≤x≤150$ &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to prove that the implication holds:&lt;/p&gt;

&lt;p&gt;$(x≥-100 ∧ x≤100) → (x&amp;lt;0 ∧ 0≤y≤300 ∨ 0≤x≤150) →\: ? →$&lt;span class=&quot;bghighlight&quot;&gt;$\text{False}$ &lt;/span&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Provide the &lt;em&gt;total&lt;/em&gt; proof for the following specification:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$[n≥0 ∧ d&amp;gt;0]$ &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;q:=0;
r:=n;
while (r&amp;gt;=d) do
  q:=q+1;
  r:=r−d
od
&lt;/code&gt; &lt;br /&gt;
$[n = q⋅d + r∧0≤r ∧ r&amp;lt;d]$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;a. We first choose and invariant:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;bghighlight&quot;&gt;$\:I ≜ n = q⋅d+r ∧ r≥0 ∧ d&amp;gt;0\:$&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;b. And a variant:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;bghighlight&quot;&gt;$\:M ≜ r\:$&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;c. We provide proof that the invariant holds before the loop:&lt;/p&gt;

&lt;p&gt;$[P]$ &lt;code class=&quot;highlighter-rouge&quot;&gt;q:=0; r:=n&lt;/code&gt; $[I]$&lt;br /&gt;
$≡$ { By the definition of $I$ and $wp$} &lt;br /&gt;
$P → wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;q:=0&lt;/code&gt;, $wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;r:=n&lt;/code&gt;, $n = q ⋅ d + r ∧ r ≥ 0 ∧ d&amp;gt;0$ &lt;br /&gt;
$≡$ { Successive application of the assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt; rule } &lt;br /&gt;
$P → (n = 0 ⋅ d + n ∧ n ≥ 0 ∧ d&amp;gt;0)$ &lt;br /&gt;
$≡$ { Definition of $P$, algebra and set theory } &lt;br /&gt;
$n ≥ 0 ∧ d &amp;gt; 0 → (n = n ∧ n ≥ 0 ∧ d&amp;gt;0) ≡$ &lt;span class=&quot;bghighlight&quot;&gt; $\:\text{True}\:$&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;d. We provide proof that the invariant holds during the loop and that the variant is strictly decreasing:&lt;/p&gt;

&lt;p&gt;$[I ∧ C ∧ M = M’]$ &lt;code class=&quot;highlighter-rouge&quot;&gt;q:=q+1; r:=r-d&lt;/code&gt; $[I ∧ M &amp;lt; M’]$ &lt;br /&gt;
$≡$ { Definition of $I$ and $M$ } &lt;br /&gt;
$[\ldots]$ &lt;code class=&quot;highlighter-rouge&quot;&gt;q:=q+1; r:=r-d&lt;/code&gt; $[n = q ⋅ d + r ∧ r ≥ 0 ∧ d&amp;gt;0 ∧ r &amp;lt; M’]$ &lt;br /&gt;
$≡$ { Proof by $wp$ } &lt;br /&gt;
$\ldots\: → wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;q:=q+1&lt;/code&gt;, $wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;r:=r-d&lt;/code&gt;, $n = q ⋅ d + r ∧ r ≥ 0 ∧ d&amp;gt;0 ∧ r &amp;lt; M’))$ &lt;br /&gt;
$≡$ { Successive application of the assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt; rule } &lt;br /&gt;
$\ldots\: → n = (q + 1) ⋅ d + (r - d) ∧ (r-d) ≥ 0 ∧ d&amp;gt;0 ∧ (r - d) &amp;lt; M’$ &lt;br /&gt;
$≡$ { Definition of $I$, $C$, $M$ and algebra } &lt;br /&gt;
$(n = q⋅d + r ∧ r≥0 ∧ r≥d ∧ d&amp;gt;0 ∧ r=M’) → (n = q⋅d + r ∧ (r-d)≥0 ∧ d&amp;gt;0 ∧ (r-d)&amp;lt; M’)$ &lt;br /&gt;
$≡$ { Algebra and set theory } &lt;br /&gt;
&lt;span class=&quot;bghighlight&quot;&gt; $\:\text{True}\:$&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;e. We provide proof that the post-condition is implied by loop termination:&lt;/p&gt;

&lt;p&gt;$I ∧ ¬ C → Q$ &lt;br /&gt;
$≡$ { Definition of $I$, $C$ and $Q$ } &lt;br /&gt;
$(n = q ⋅ d + r ∧ r ≥ 0∧ d&amp;gt;0 ∧ r &amp;lt; d) → (n = q ⋅ d + r ∧ 0 ≤ r ∧ r &amp;lt; d)≡$ &lt;span class=&quot;bghighlight&quot;&gt; $\:\text{True}\:$&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;f. We provide proof that the variant is strictly positive before the loop:&lt;/p&gt;

&lt;p&gt;$I ∧ C → M &amp;gt; 0$ &lt;br /&gt;
$≡$ { Definition of $I$, $C$ and $M$ } &lt;br /&gt;
$(n = q ⋅ d + r ∧ r ≥ 0 ∧ r &amp;gt;= d ∧ d&amp;gt;0) → (r &amp;gt; 0)≡$ &lt;span class=&quot;bghighlight&quot;&gt; $\:\text{True}\:$&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Find the program &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; that refines the following specifications:&lt;/p&gt;

&lt;p&gt;4.1. $\{x=0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; $\{y=x\}$&lt;/p&gt;

&lt;p&gt;Spec($x=0$, &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, $y=x$) &lt;br /&gt;
$\sqsubseteq$ { Refinement of the assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;:=&lt;/code&gt; } &lt;br /&gt;
Spec($x=0$, &lt;code class=&quot;highlighter-rouge&quot;&gt;y:=x&lt;/code&gt;, $y=x$).&lt;/p&gt;

&lt;p&gt;4.2. $\{y=2 ∧ x=3\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; $\{x=3\}$&lt;/p&gt;

&lt;p&gt;Spec($y=2 ∧ x=3$, &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, $x=3$) &lt;br /&gt;
$\sqsubseteq$ { Refinement of &lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt;, given that $y=2 ∧ x=3 → x=3$ } &lt;br /&gt;
Spec($y=2 ∧ x=3$, &lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt;, $x=3$).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Prove o seguinte programa através de refinamento (indique as regras que aplicou em cada passo).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\{ x = m ∧ y = n ∧ m&amp;gt;0\}$ &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
while (x!=0) do
  y:=y-1;
  x:=x-1
od
&lt;/code&gt; &lt;br /&gt;
$\{ y = n - m \}$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O ponto de partida é então:&lt;/p&gt;

&lt;p&gt;Spec($x=m ∧ y=n ∧ m&amp;gt;0$, &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, $y=n-m)$&lt;/p&gt;

&lt;p&gt;a. Encontrar invariante e variante do ciclo e verificar aplicabilidade da regra da repetição. Lembrando a regra da repetição (para caso de condição de guarda simples, e com $I$ em vez de $P$, considerando que desempenha o papel de invariante do ciclo):&lt;/p&gt;

&lt;p&gt;$\{I\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; $\{I∧¬G\}$ &lt;br /&gt;
$\sqsubseteq$ { Regra da repetição } &lt;br /&gt;
$\{I\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;while G do&lt;/code&gt; $\{I∧G∧V=V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S1&lt;/code&gt; $\{I∧0 ≤ V&amp;lt;V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;od&lt;/code&gt; $\{I∧¬G\}$&lt;/p&gt;

&lt;p&gt;Para a aplicar, temos de escolher $I$ (invariante do ciclo) e $V$ (variante do ciclo), e.g.:&lt;/p&gt;

&lt;p&gt;$I ≜ y = n-m+x ∧ x≥0$ &lt;br /&gt;
$V ≜ x$&lt;/p&gt;

&lt;p&gt;No entanto, a pré-condição e pós-condição do triplo inicial não são equivalentes a $I$ e $I∧¬G$  (com $G ≜ x≠0$) respectivamente, pelo que temos de começar por enfraquecer a pré-condição e fortalecer a pós-condição, para depois introduzir o ciclo:&lt;/p&gt;

&lt;p&gt;$\hphantom{⊑}$ { enfraquecer a pré-condição } &lt;br /&gt;
$\{ x = m ∧ y = n ∧ m&amp;gt;0 \}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; $\{ y = n - m \}$ &lt;br /&gt;
$⊑$ { dado que $x = m ∧ y = n ∧ m&amp;gt;0 → y = n – m + x ∧ x ≥ 0$ } &lt;br /&gt;
$\{ y = n-m+x ∧ x ≥ 0 \}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; $\{ y = n-m \}$ &lt;br /&gt;
$⊑$ { fortalecer a pós-condição, dado $(y = n-m+x ∧ x≥0) ∧ ¬x≠0 → y = n-m$ } &lt;br /&gt;
$\{\ldots\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; $\{ (y = n-m+x ∧ x≥ 0)  ∧ ¬x≠0\}$ &lt;br /&gt;
$⊑$ { introduzir o ciclo, pela regra da repetição, com $V≜x$ } &lt;br /&gt;
$\{\ldots\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;while x!=0 do &lt;/code&gt; $\{y=n-m+x ∧ x≥0 ∧ x≠0 ∧ x=V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S1&lt;/code&gt; $\{y=n-m+x ∧ x≥0 ∧ 0≤x&amp;lt;V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;od&lt;/code&gt; $\{ (y = n-m+x ∧ x≥0) ∧ ¬x=0\}$ &lt;br /&gt;
$⊑$ { por simplificação de expressões } &lt;br /&gt;
$\{\ldots\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;while x != 0 do&lt;/code&gt; $\{y=n-m+x ∧ x&amp;gt;0 ∧ x=V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S1&lt;/code&gt; $\{(y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;od&lt;/code&gt; $\{ y = n-m+x ∧ x=0 \}$ &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;b. Introduzir sequência aplicando regra da composição. Temos agora que refinar $\{y=n-m+x ∧ x&amp;gt;0 ∧ x=V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S1&lt;/code&gt; $\{y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0\}$ para $\{y=n-m+x ∧ x&amp;gt;0 ∧ x=V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;y:=y-1; x:=x-1&lt;/code&gt; $\{y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0\}$&lt;/p&gt;

&lt;p&gt;Para isso, temos de começar por aplicar a regra da composição, com uma asserção intermédia $M$ apropriada:&lt;/p&gt;

&lt;p&gt;$\{y=n-m+x ∧ x&amp;gt;0 ∧ x=V0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S1&lt;/code&gt; $\{y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0\}$ &lt;br /&gt;
$⊑$ { regra da composição } &lt;br /&gt;
$\{y=n-m+x ∧ x&amp;gt;0 ∧ x=V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S2&lt;/code&gt; $\{M\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S3&lt;/code&gt; $\{y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0\}$&lt;/p&gt;

&lt;p&gt;Uma solução segura é usar a pré-condição mais fraca:&lt;/p&gt;

&lt;p&gt;$M ≜ wp($&lt;code class=&quot;highlighter-rouge&quot;&gt;x:=x-1&lt;/code&gt;, $y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0)$ &lt;br /&gt;
$\hphantom{M} ≡ (y=n-m+x-1 ∧ x-1≥0 ∧ x-1&amp;lt;V_0)$ &lt;br /&gt;
$\hphantom{M} ≡ (y=n-m+x-1 ∧ x≥1 ∧ x≤V_0)$&lt;/p&gt;

&lt;p&gt;c. Introduzir uma das atribuições:&lt;/p&gt;

&lt;p&gt;$\{y=n-m+x-1 ∧ x≥1 ∧ x≤V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S3&lt;/code&gt; $\{y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0\}$ &lt;br /&gt;
$⊑$ {dado que $(y=n-m+x-1 ∧ x≥1 ∧ x≤V_0) ⇛ (y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0)[x/x-1]$ } &lt;br /&gt;
$\{y=n-m+x-1 ∧ x≥1 ∧ x≤V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;x: = x-1&lt;/code&gt; $\{y=n-m+x ∧ x≥0 ∧ x&amp;lt;V_0\}$&lt;/p&gt;

&lt;p&gt;d. Introduzir a outra atribuição:&lt;/p&gt;

&lt;p&gt;$\{y=n-m+x ∧ x&amp;gt;0 ∧ x=V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;S2&lt;/code&gt; $\{y=n-m+x-1 ∧ x≥1 ∧ x≤V_0\}$ &lt;br /&gt;
$⊑$ { … } &lt;br /&gt;
$\{y=n-m+x ∧ x&amp;gt;0 ∧ x=V_0\}$ &lt;code class=&quot;highlighter-rouge&quot;&gt;y := y-1&lt;/code&gt; $\{y=n-m+x-1 ∧ x≥1 ∧ x≤V_0\}$&lt;/p&gt;

&lt;p&gt;Neste caso temos de provar que:&lt;/p&gt;

&lt;p&gt;$y=n-m+x ∧ x&amp;gt;0 ∧ x=V_0 ⇛ y-1=n-m+x-1 ∧ x≥1 ∧ x≤V_0$&lt;/p&gt;

&lt;p&gt;Ora cada clásula do lado direita é equivalente ou implicada pela cláusula na mesma posição do lado esquerdo, pela que a implicação é sempre verdadeira, para quaisquer valores das variáveis. Isto conclui a prova por refinamento.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 18:28:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2017/01/25/Exercises-In-Program-Design-By-Calculation/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/01/25/Exercises-In-Program-Design-By-Calculation/</guid>
        
        
        <category>Software</category>
        
      </item>
    
      <item>
        <title>Your Kiss</title>
        <description>&lt;p&gt;In an attempt to describe your kiss, I realized I was lost at words for such endeavor. I hopelessly sat in from of my laptop, absently glancing at its uninspiring keyboard, without knowing what to type. Trying to find them in a dictionary would also be a futile attempt, for I wouldn’t know what to look for. Notwithstanding, the specification of the task seems simple enough: imagine someone who’ve never been kissed by you… now proceed to communicate the exact feeling one would have.&lt;/p&gt;

&lt;p&gt;And still, no words come to me…&lt;/p&gt;

&lt;p&gt;One could attempt to approach the problem by a breakdown of the physical process. Her soft, voluptuous, wet lips slowly approach your own. You perceive her warm, sweet breath, and in your mind, an anxiety is already installed foreseeing the moment they will touch you. Her big, beautiful, brown eyes can hardly go unnoticed, while simultaneously your hands experience the disconcerting feeling of her smooth skin. Her intoxicating scent can only be rivaled by the overwhelming yearning of her forbidden taste and the breathtaking play of her tongue…&lt;/p&gt;

&lt;p&gt;And all this happens before the kiss &lt;em&gt;per se&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A second perspective could base itself on the physiological properties. In front of you lies a gorgeous woman, with whom you’ve shared countless hours of deep, passionate love. Her lips promise the rush of endorphins racing throughout your veins, while synaptic networks activate both your memory and pleasure centers. Your knees tremble due to the adrenaline being released. Your blood pressure rises, your heart flutters, your cheeks blush…&lt;/p&gt;

&lt;p&gt;But it’s still not enough…&lt;/p&gt;

&lt;p&gt;One could finally resort to detail what is not to be kissed by you, and dissertate about the dark, cold veil that surrounds one’s heart in the absence of your embrace. The longing for that feeling where time should have stopped; or where the arrow of entropy could be arbitrarily reversed so one would eternally live that single moment where life itself loses all meaning.&lt;/p&gt;

&lt;p&gt;Yet, I fail…&lt;/p&gt;

&lt;p&gt;Thus, after such fruitless struggle, I am forced to conclude that no sequence of words or chain of symbols could ever be used to faithfully fit into such description… and likely the reason is due to the fact that only in their absence can one begin to contemplate the depth of your kiss.&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Aug 2016 23:08:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2016/08/17/Your-Kiss/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/08/17/Your-Kiss/</guid>
        
        
        <category>Poetry</category>
        
      </item>
    
      <item>
        <title>I Didn't Want</title>
        <description>&lt;p&gt;I didn’t &lt;em&gt;want&lt;/em&gt; to love you…&lt;br /&gt;
I didn’t &lt;em&gt;choose&lt;/em&gt; to love you…&lt;/p&gt;

&lt;p&gt;I know such thing because I am able to recall with meticulous detail the moment I realized that the oath I repeated to myself so many times — that I would &lt;em&gt;not&lt;/em&gt; fall in love with you — would be utterly impossible to hold.&lt;/p&gt;

&lt;p&gt;You’re sitting in my lap, in my chair, with my hands absently touching your naked, soft legs. An amused laugh precedes that idiosyncratic cry of yours — “My god, yes!” — while you simultaneously choose the next sequence of notes to be echoed throughout this room’s walls, filling the air with music and lyrics of an art I will never possess so I could write them for you… though I wished so… but I am, irrevocably and simply, &lt;em&gt;me&lt;/em&gt;. And as such, I resign myself to contemplate your intoxicating existence, drawing a faint smile from who’s head is running a hundred miles per hour, speeding through roads of endless thought.&lt;/p&gt;

&lt;p&gt;It is not without irony that two events occur to me at this time…&lt;/p&gt;

&lt;p&gt;The first one takes place a couple of days later. While we skim through the set of photos that will forever preserve in print that scented, young image of yours, I comment nonchalantly — almost &lt;em&gt;en passant&lt;/em&gt; — that I have never quite realized how beautiful you were. However, it is now to my surprise that this assertion postulates a lie. The truth resides in the fact that at this precise moment, sitting in this chair, nothing is so obvious, nothing is so axiomatically true as that very same proposition: you &lt;em&gt;are&lt;/em&gt; perfectly, flawlessly, gorgeous.&lt;/p&gt;

&lt;p&gt;By unbalanced symmetry, the second one is drawn from a couple of years ago: the instant you entered energetically and cheerfully into my workroom, as someone who’s fallen for the bittersweet taste of life. Would I have pondered on the possibility to someday hold you tight in my arms, lost amongst moisten sheets due to the ample sweat of the hours that insist running by us… and I would have certainly laughed in disbelief by the extreme improbability of such an exquisite event. But, it seems, that not even all the rigorous products of bayesian factors are able to forecast the surprising fate of those who wander throughout this delightful and absurd existence.&lt;/p&gt;

&lt;p&gt;And in between those two events, I find you here, innocently sitting on my lap — “My god, yes!” — while I attentively watch you sing joyfully and without refrain, deeply and anxiously inhaling all life surrounding your being. Your big brown eyes dance, sparkle, and jiggle around imaginary objects painted the same color of the next tune you choose to listen…&lt;/p&gt;

&lt;p&gt;… when the aforementioned moment comes; where I inadvertently — perhaps unwittingly — glance over your voluptuous red lips, certainly designed with the sole purpose of making myself loose so helplessly in them. And with a swift and impromptu attitude, an absolute silence rushes to surround me… and the beating of my heart is suspended for what seems like an eternity… and my legs tremble beneath your precious body.&lt;/p&gt;

&lt;p&gt;I didn’t &lt;em&gt;want&lt;/em&gt; to love you…&lt;br /&gt;
I didn’t &lt;em&gt;choose&lt;/em&gt; to love you…&lt;/p&gt;

&lt;p&gt;And you, so steeped in that contagious happiness, might have just missed that moment where you became the reason for forever holding this slice of spacetime within me.&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Jul 2016 11:08:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2016/07/31/I-didnt-want/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/07/31/I-didnt-want/</guid>
        
        
        <category>Poetry</category>
        
      </item>
    
      <item>
        <title>Sleeping Beauty</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Sleeping Beauty undergoes an experiment where she’s put to sleep on Sunday. Immediately after that, a fair coin is tossed. If it comes out Heads, Sleeping Beauty is waken on Monday. If it comes out Tails, she’s waken both on Monday and Tuesday. After being waken, the experimentalist asks Sleeping Beauty: &lt;em&gt;“What is your degree of certainty that the coin landed heads?”&lt;/em&gt;. He subsequently puts Sleeping Beauty to sleep, taking care to administer her an amnesia inducing drug that ensures she doesn’t remember the experiment. Hence, everytime Sleeping Beauty is awaked, she won’t know which day it is or whether she has already been awakened before or not. What should her answer be?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s amazing how a simple puzzle installs chaos among mathematicians and philosophers alike. Some would argue that the correct probability is ½: after all, the coin is &lt;strong&gt;fair&lt;/strong&gt;, isn’t it? Others would say that the correct probability should be ⅓. Think about this problem for a second because the correct answer is… &lt;strong&gt;both&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;As many things in life, it’s all a matter of perspective. And the conundrum here lies in the way the problem is phrased. But before going into maths and probability theory, we shall &lt;strong&gt;simulate&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// toss a fair coin&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Heads was tossed. Wake on Monday.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Sleeping Beauty always bet Heads was tossed;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... in this case, only once.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;heads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Tails was tossed. Wake on Monday and Tuesday.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Sleeping Beauty always bet Heads was tossed;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... in this case, it will bet both on Monday&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and Tuesday. But it will fail!&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Probability of SB being correct: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;correct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Probability of Heads being tossed: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;heads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the result with &lt;a href=&quot;javascript:simulate(1000)&quot;&gt;1000&lt;/a&gt;, &lt;a href=&quot;javascript:simulate(10000)&quot;&gt;10000&lt;/a&gt;, and &lt;a href=&quot;javascript:simulate(100000)&quot;&gt;100000&lt;/a&gt; runs:&lt;/p&gt;

&lt;div id=&quot;output&quot; class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Probability of SB being correct: 0.33636242148870776
Probability of Heads being tossed: 0.5034
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;two-questions-two-answers&quot;&gt;Two questions, two answers&lt;/h2&gt;

&lt;p&gt;The attentive reader should have already grasped that the answer depends on &lt;em&gt;what exactly we are counting as a success&lt;/em&gt;. If we measure success as the &lt;em&gt;number of times Sleeping Beauty is able to give a correct answer&lt;/em&gt;, then her &lt;em&gt;degree&lt;/em&gt; of confidence should be ⅓, as the above simulation shows. If you are still unable to see how, under that measurement of success, the number of times Sleeping Beauty is awakened impacts the answer, then imagine the following puzzle variant:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(…) she’s put to sleep on the 31th of December. If it comes out Heads, Sleeping Beauty is waken on the 1st of January. If it comes out Tails, she’s waken every single day for the whole year, &lt;em&gt;i.e.&lt;/em&gt;, 365 days.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or even something a little more extreme:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(…) If it comes out Heads, Sleeping Beauty is waken on Monday. If it comes out Tails, she stays asleep forever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last one is my favorite variation, since it’s pretty obvious that, if she’s ever awakened, then the confidence she has that Heads was tossed is 100%; even if that mere fact doesn’t influence even a bit the tossing of a fair coin. It is an &lt;em&gt;a posteriori&lt;/em&gt; confidence, &lt;em&gt;given that she’s waken&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On the converse, this discussion points out to the second interpretation, which is the &lt;em&gt;confidence Sleeping Beauty has that the coin could produce Heads at the moment of tossing&lt;/em&gt;. In other words, an &lt;em&gt;a priori&lt;/em&gt; confidence on the bias of the coin &lt;em&gt;per se&lt;/em&gt;. This last one would always be 0.5, but we can no longer rely on multiple trials to measure success(es) because if Tails come up, Sleeping Beauty will never be able to answer.&lt;/p&gt;

&lt;p&gt;There has been an extensive discussion on this topic, so I will not reiterate what has already been well laid out &lt;a href=&quot;http://arxiv.org/ftp/arxiv/papers/0806/0806.1316.pdf&quot;&gt;in this paper&lt;/a&gt;, in this  &lt;a href=&quot;https://www.youtube.com/watch?v=zL52lG6aNIY&quot;&gt;video&lt;/a&gt;, in &lt;a href=&quot;https://en.wikipedia.org/wiki/Sleeping_Beauty&quot;&gt;Wikipedia&lt;/a&gt;, or, more recently, during several different expositions [&lt;a href=&quot;https://www.quantamagazine.org/20160114-sleeping-beautys-necker-cube-dilemma/&quot;&gt;1&lt;/a&gt;,
&lt;a href=&quot;https://www.quantamagazine.org/20160129-solution-sleeping-beautys-dilemma/&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://www.quantamagazine.org/20160331-why-sleeping-beauty-is-lost-in-time/&quot;&gt;3&lt;/a&gt;] in &lt;a href=&quot;http://www.quantamagazine.org/&quot;&gt;Quanta Magazine&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 May 2016 15:46:00 +0530</pubDate>
        <link>http://localhost:4000/blog/2016/05/28/sleeping-beauty/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/05/28/sleeping-beauty/</guid>
        
        
        <category>Mathematics</category>
        
      </item>
    
  </channel>
</rss>
